<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Siaqodb</name>
    </assembly>
    <members>
        <member name="M:Sqo.Documents.Bucket.Cast``1">
            <summary>
            Cast method to be used in LINQ queries
            </summary>
            <typeparam name="T">Type over which LINQ will take action</typeparam>
            <returns></returns>
        </member>
        <member name="M:Sqo.Documents.Bucket.Query``1">
            <summary>
            Query method to be used in LINQ queries
            </summary>
            <typeparam name="T">Type over which LINQ will take action</typeparam>
            <returns></returns>
        </member>
        <member name="T:Sqo.Documents.DocQueryExtensions.WhereNormalizer">
            <summary>
            Normalizes Where expressions.
            </summary>
        </member>
        <member name="M:Sqo.Documents.DocQueryExtensions.WhereNormalizer.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            If a ! operator is used, this removes the ! and instead calls the equivalent
            function (so e.g. == becomes !=, &lt; becomes &gt;=, Contains becomes NotContains)
            </summary>
        </member>
        <member name="M:Sqo.Documents.DocQueryExtensions.WhereNormalizer.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Normalizes .Equals into == and Contains() into the appropriate stub.
            </summary>
        </member>
        <member name="T:Sqo.Documents.Utils.EndianBitConverter">
            <summary>
            Equivalent of System.BitConverter, but with either endianness.
            </summary>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:Sqo.Documents.Utils.EndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="P:Sqo.Documents.Utils.EndianBitConverter.Little">
            <summary>
            Returns a little-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="P:Sqo.Documents.Utils.EndianBitConverter.Big">
            <summary>
            Returns a big-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.DoubleToInt64Bits(System.Double)">
            <summary>
            Converts the specified double-precision floating point number to a 
            64-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 64-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.Int64BitsToDouble(System.Int64)">
            <summary>
            Converts the specified 64-bit signed integer to a double-precision 
            floating point number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A double-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.SingleToInt32Bits(System.Single)">
            <summary>
            Converts the specified single-precision floating point number to a 
            32-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 32-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.Int32BitsToSingle(System.Int32)">
            <summary>
            Converts the specified 32-bit signed integer to a single-precision floating point 
            number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A single-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            Returns a Boolean value converted from one byte at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.ToChar(System.Byte[],System.Int32)">
            <summary>
            Returns a Unicode character converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A character formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Returns a double-precision floating point number converted from eight bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A double precision floating point number formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Returns a single-precision floating point number converted from four bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A single precision floating point number formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.CheckByteArgument(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the given argument for validity.
            </summary>
            <param name="value">The byte array passed in</param>
            <param name="startIndex">The start index passed in</param>
            <param name="bytesRequired">The number of bytes required</param>
            <exception cref="T:System.ArgumentNullException">value is a null reference</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex is less than zero or greater than the length of value minus bytesRequired.
            </exception>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.CheckedFromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the arguments for validity before calling FromBytes
            (which can therefore assume the arguments are valid).
            </summary>
            <param name="value">The bytes to convert after checking</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to convert</param>
            <returns></returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert the given number of bytes from the given array, from the given start
            position, into a long, using the bytes as the least significant part of the long.
            By the time this is called, the arguments have been checked for validity.
            </summary>
            <param name="value">The bytes to convert</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to use in the conversion</param>
            <returns>The converted number</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.ToString(System.Byte[])">
            <summary>
            Returns a String converted from the elements of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <remarks>All the elements of value are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.ToString(System.Byte[],System.Int32)">
            <summary>
            Returns a String converted from the elements of a byte array starting at a specified array position.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <remarks>The elements from array position startIndex to the end of the array are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a String converted from a specified number of bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <param name="length">The number of bytes to convert.</param>
            <remarks>The length elements from array position startIndex are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.ToDecimal(System.Byte[],System.Int32)">
            <summary>
            Returns a decimal value converted from sixteen bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A decimal  formed by sixteen bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.GetBytes(System.Decimal)">
            <summary>
            Returns the specified decimal value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 16.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.CopyBytes(System.Decimal,System.Byte[],System.Int32)">
            <summary>
            Copies the specified decimal value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.GetBytes(System.Int64,System.Int32)">
            <summary>
            Returns an array with the given number of bytes formed
            from the least significant bytes of the specified value.
            This is used to implement the other GetBytes methods.
            </summary>
            <param name="value">The value to get bytes for</param>
            <param name="bytes">The number of significant bytes to return</param>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.GetBytes(System.Boolean)">
            <summary>
            Returns the specified Boolean value as an array of bytes.
            </summary>
            <param name="value">A Boolean value.</param>
            <returns>An array of bytes with length 1.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.GetBytes(System.Char)">
            <summary>
            Returns the specified Unicode character value as an array of bytes.
            </summary>
            <param name="value">A character to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.GetBytes(System.Double)">
            <summary>
            Returns the specified double-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.GetBytes(System.Int16)">
            <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.GetBytes(System.Int32)">
            <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.GetBytes(System.Int64)">
            <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.GetBytes(System.Single)">
            <summary>
            Returns the specified single-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.GetBytes(System.UInt16)">
            <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.GetBytes(System.UInt32)">
            <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.GetBytes(System.UInt64)">
            <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.CopyBytes(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This is used to implement the other CopyBytes methods.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This must be implemented in concrete derived classes, but the implementation
            may assume that the value will fit into the buffer.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.CopyBytes(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Boolean value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A Boolean value.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.CopyBytes(System.Char,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Unicode character value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.CopyBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
            Copies the specified double-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.CopyBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.CopyBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.CopyBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.CopyBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
            Copies the specified single-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.CopyBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.CopyBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.CopyBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="T:Sqo.Documents.Utils.EndianBitConverter.Int32SingleUnion">
            <summary>
            Union used solely for the equivalent of DoubleToInt64Bits and vice versa.
            </summary>
        </member>
        <member name="F:Sqo.Documents.Utils.EndianBitConverter.Int32SingleUnion.i">
            <summary>
            Int32 version of the value.
            </summary>
        </member>
        <member name="F:Sqo.Documents.Utils.EndianBitConverter.Int32SingleUnion.f">
            <summary>
            Single version of the value.
            </summary>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.Int32SingleUnion.#ctor(System.Int32)">
            <summary>
            Creates an instance representing the given integer.
            </summary>
            <param name="i">The integer value of the new instance.</param>
        </member>
        <member name="M:Sqo.Documents.Utils.EndianBitConverter.Int32SingleUnion.#ctor(System.Single)">
            <summary>
            Creates an instance representing the given floating point number.
            </summary>
            <param name="f">The floating point value of the new instance.</param>
        </member>
        <member name="P:Sqo.Documents.Utils.EndianBitConverter.Int32SingleUnion.AsInt32">
            <summary>
            Returns the value of the instance as an integer.
            </summary>
        </member>
        <member name="P:Sqo.Documents.Utils.EndianBitConverter.Int32SingleUnion.AsSingle">
            <summary>
            Returns the value of the instance as a floating point number.
            </summary>
        </member>
        <member name="M:Sqo.Documents.Utils.BigEndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:Sqo.Documents.Utils.BigEndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:Sqo.Documents.Utils.BigEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:Sqo.Documents.Utils.BigEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a value built from the specified number of bytes from the given buffer,
            starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="M:Sqo.Documents.Utils.LittleEndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:Sqo.Documents.Utils.LittleEndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:Sqo.Documents.Utils.LittleEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:Sqo.Documents.Utils.LittleEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a value built from the specified number of bytes from the given buffer,
            starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="F:Sqo.Documents.Utils.Endianness.LittleEndian">
            <summary>
            Little endian - least significant byte first
            </summary>
        </member>
        <member name="F:Sqo.Documents.Utils.Endianness.BigEndian">
            <summary>
            Big endian - most significant byte first
            </summary>
        </member>
        <member name="T:Sqo.Internal._bs">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._b(System.String)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Sqo.Internal._bs._ofm(System.String,System.String)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Sqo.Internal._bs._uf(Sqo.Siaqodb,System.Int32,Sqo.MetaType,System.String,System.Object)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._gd(Sqo.Siaqodb,System.Type)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._do(Sqo.Siaqodb,System.Int32,Sqo.MetaType)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._io(Sqo.Siaqodb,Sqo.MetaType)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._sdbfn(Sqo.Siaqodb,Sqo.MetaType,System.String)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._loidtid(Sqo.Siaqodb,System.Int32,Sqo.MetaType,System.String,System.Collections.Generic.List{System.Int32}@,System.Int32@)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._ltid(Sqo.Siaqodb,System.Int32,Sqo.MetaType,System.String,System.Int32@,System.Boolean@)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._loidby(Sqo.Siaqodb,System.String,System.Object)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._lobjby(Sqo.Siaqodb,System.Type,System.Int32)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._hsy">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._hamssy">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._sanc(Sqo.Siaqodb,System.Byte[],System.String)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._ganc(Sqo.Siaqodb,System.String)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._danc(Sqo.Siaqodb,System.String)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._gcs(Sqo.Documents.Bucket)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._uv(Sqo.Documents.Bucket,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._csm(Sqo.Documents.Bucket)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._de(Sqo.Documents.Bucket,System.String,System.Boolean)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._sa(Sqo.Documents.Bucket,System.String)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._sb(Sqo.Documents.Bucket,System.Collections.Generic.IList{Sqo.Documents.Document},System.Boolean)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._gab(Sqo.Documents.Bucket)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._ibs(Sqo.Documents.Bucket)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <member name="M:Sqo.Internal._bs._si(Sqo.Documents.Bucket,Sqo.Documents.Document,System.Boolean)">
            <summary>
            Do NOT use it!, it is used only internally
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sqo.Evaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})" -->
        <!-- Badly formed XML comment ignored for member "M:Sqo.Evaluator.PartialEval(System.Linq.Expressions.Expression)" -->
        <!-- Badly formed XML comment ignored for member "T:Sqo.Evaluator.SubtreeEvaluator" -->
        <!-- Badly formed XML comment ignored for member "T:Sqo.Evaluator.Nominator" -->
        <member name="M:Sqo.Meta.MetaExtractor.CompareSqoTypeInfos(Sqo.Meta.SqoTypeInfo,Sqo.Meta.SqoTypeInfo)">
            <summary>
            Return true if is same
            </summary>
            <param name="actual"></param>
            <param name="fromDB"></param>
            <returns></returns>
        </member>
        <member name="M:Sqo.Transactions.Transaction.Commit">
            <summary>
            Commit transaction to database
            </summary>
        </member>
        <member name="M:Sqo.Transactions.Transaction.CommitAsync">
            <summary>
            Commit transaction to database
            </summary>
        </member>
        <member name="M:Sqo.Transactions.Transaction.Rollback">
            <summary>
            Rollback changes
            </summary>
        </member>
        <member name="M:Sqo.Transactions.Transaction.RollbackAsync">
            <summary>
            Rollback changes
            </summary>
        </member>
        <member name="T:Sqo.Utilities.EndianBitConverter">
            <summary>
            Equivalent of System.BitConverter, but with either endianness.
            </summary>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:Sqo.Utilities.EndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="P:Sqo.Utilities.EndianBitConverter.Little">
            <summary>
            Returns a little-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="P:Sqo.Utilities.EndianBitConverter.Big">
            <summary>
            Returns a big-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.DoubleToInt64Bits(System.Double)">
            <summary>
            Converts the specified double-precision floating point number to a 
            64-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 64-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.Int64BitsToDouble(System.Int64)">
            <summary>
            Converts the specified 64-bit signed integer to a double-precision 
            floating point number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A double-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.SingleToInt32Bits(System.Single)">
            <summary>
            Converts the specified single-precision floating point number to a 
            32-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 32-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.Int32BitsToSingle(System.Int32)">
            <summary>
            Converts the specified 32-bit signed integer to a single-precision floating point 
            number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A single-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            Returns a Boolean value converted from one byte at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.ToChar(System.Byte[],System.Int32)">
            <summary>
            Returns a Unicode character converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A character formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Returns a double-precision floating point number converted from eight bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A double precision floating point number formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Returns a single-precision floating point number converted from four bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A single precision floating point number formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.CheckByteArgument(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the given argument for validity.
            </summary>
            <param name="value">The byte array passed in</param>
            <param name="startIndex">The start index passed in</param>
            <param name="bytesRequired">The number of bytes required</param>
            <exception cref="T:System.ArgumentNullException">value is a null reference</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex is less than zero or greater than the length of value minus bytesRequired.
            </exception>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.CheckedFromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the arguments for validity before calling FromBytes
            (which can therefore assume the arguments are valid).
            </summary>
            <param name="value">The bytes to convert after checking</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to convert</param>
            <returns></returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert the given number of bytes from the given array, from the given start
            position, into a long, using the bytes as the least significant part of the long.
            By the time this is called, the arguments have been checked for validity.
            </summary>
            <param name="value">The bytes to convert</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to use in the conversion</param>
            <returns>The converted number</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.ToString(System.Byte[])">
            <summary>
            Returns a String converted from the elements of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <remarks>All the elements of value are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.ToString(System.Byte[],System.Int32)">
            <summary>
            Returns a String converted from the elements of a byte array starting at a specified array position.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <remarks>The elements from array position startIndex to the end of the array are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a String converted from a specified number of bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <param name="length">The number of bytes to convert.</param>
            <remarks>The length elements from array position startIndex are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.ToDecimal(System.Byte[],System.Int32)">
            <summary>
            Returns a decimal value converted from sixteen bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A decimal  formed by sixteen bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.GetBytes(System.Decimal)">
            <summary>
            Returns the specified decimal value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 16.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.CopyBytes(System.Decimal,System.Byte[],System.Int32)">
            <summary>
            Copies the specified decimal value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.GetBytes(System.Int64,System.Int32)">
            <summary>
            Returns an array with the given number of bytes formed
            from the least significant bytes of the specified value.
            This is used to implement the other GetBytes methods.
            </summary>
            <param name="value">The value to get bytes for</param>
            <param name="bytes">The number of significant bytes to return</param>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.GetBytes(System.Boolean)">
            <summary>
            Returns the specified Boolean value as an array of bytes.
            </summary>
            <param name="value">A Boolean value.</param>
            <returns>An array of bytes with length 1.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.GetBytes(System.Char)">
            <summary>
            Returns the specified Unicode character value as an array of bytes.
            </summary>
            <param name="value">A character to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.GetBytes(System.Double)">
            <summary>
            Returns the specified double-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.GetBytes(System.Int16)">
            <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.GetBytes(System.Int32)">
            <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.GetBytes(System.Int64)">
            <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.GetBytes(System.Single)">
            <summary>
            Returns the specified single-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.GetBytes(System.UInt16)">
            <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.GetBytes(System.UInt32)">
            <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.GetBytes(System.UInt64)">
            <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.CopyBytes(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This is used to implement the other CopyBytes methods.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This must be implemented in concrete derived classes, but the implementation
            may assume that the value will fit into the buffer.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.CopyBytes(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Boolean value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A Boolean value.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.CopyBytes(System.Char,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Unicode character value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.CopyBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
            Copies the specified double-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.CopyBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.CopyBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.CopyBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.CopyBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
            Copies the specified single-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.CopyBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.CopyBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.CopyBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="T:Sqo.Utilities.EndianBitConverter.Int32SingleUnion">
            <summary>
            Union used solely for the equivalent of DoubleToInt64Bits and vice versa.
            </summary>
        </member>
        <member name="F:Sqo.Utilities.EndianBitConverter.Int32SingleUnion.i">
            <summary>
            Int32 version of the value.
            </summary>
        </member>
        <member name="F:Sqo.Utilities.EndianBitConverter.Int32SingleUnion.f">
            <summary>
            Single version of the value.
            </summary>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.Int32SingleUnion.#ctor(System.Int32)">
            <summary>
            Creates an instance representing the given integer.
            </summary>
            <param name="i">The integer value of the new instance.</param>
        </member>
        <member name="M:Sqo.Utilities.EndianBitConverter.Int32SingleUnion.#ctor(System.Single)">
            <summary>
            Creates an instance representing the given floating point number.
            </summary>
            <param name="f">The floating point value of the new instance.</param>
        </member>
        <member name="P:Sqo.Utilities.EndianBitConverter.Int32SingleUnion.AsInt32">
            <summary>
            Returns the value of the instance as an integer.
            </summary>
        </member>
        <member name="P:Sqo.Utilities.EndianBitConverter.Int32SingleUnion.AsSingle">
            <summary>
            Returns the value of the instance as a floating point number.
            </summary>
        </member>
        <member name="M:Sqo.Utilities.BigEndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:Sqo.Utilities.BigEndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:Sqo.Utilities.BigEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:Sqo.Utilities.BigEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a value built from the specified number of bytes from the given buffer,
            starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="M:Sqo.Utilities.LittleEndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:Sqo.Utilities.LittleEndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:Sqo.Utilities.LittleEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:Sqo.Utilities.LittleEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a value built from the specified number of bytes from the given buffer,
            starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="F:Sqo.Utilities.Endianness.LittleEndian">
            <summary>
            Little endian - least significant byte first
            </summary>
        </member>
        <member name="F:Sqo.Utilities.Endianness.BigEndian">
            <summary>
            Big endian - most significant byte first
            </summary>
        </member>
        <member name="T:Sqo.ObjectList`1">
            <summary>
            List used to retrieve objects from database
            </summary>
            <typeparam name="T">Type of objects from list</typeparam>
        </member>
        <member name="T:Sqo.Siaqodb">
            <summary>
            Main class of siaqodb database engine responsible for storing, retrieving ,deleting objects on database files
            </summary>
        </member>
        <member name="F:Sqo.Siaqodb.savingObject">
            <summary>
            Raised before an object is saved in database
            </summary>
        </member>
        <member name="F:Sqo.Siaqodb.savedObject">
            <summary>
            Raised after an object is saved in database
            </summary>
        </member>
        <member name="F:Sqo.Siaqodb.deletingObject">
            <summary>
            Raised before an object is deleted from database
            </summary>
        </member>
        <member name="F:Sqo.Siaqodb.deletedObject">
            <summary>
            Raised after an object is deleted from database
            </summary>
        </member>
        <member name="F:Sqo.Siaqodb.loadingObject">
            <summary>
            Raised before an object is loaded from database
            </summary>
        </member>
        <member name="F:Sqo.Siaqodb.loadedObject">
            <summary>
            Raised after object is loaded from database
            </summary>
        </member>
        <member name="M:Sqo.Siaqodb.#ctor">
            <summary>
            Create a new instance of Siaqodb, database is not opened yet
            </summary>
        </member>
        <member name="M:Sqo.Siaqodb.#ctor(System.String)">
            <summary>
            Create a new instance of Siaqodb and open the database
            </summary>
            <param name="path">Physical folder name where objects are stored</param>
        </member>
        <member name="M:Sqo.Siaqodb.#ctor(System.String,System.Int64)">
            <summary>
            Create a new instance of Siaqodb and open the database with a maximum size defined 
            </summary>
            <param name="path">Physical folder name where objects are stored</param>
            <param name="maxDatabaseSize">max database size in bytes (default 50 MB )</param>
        </member>
        <member name="M:Sqo.Siaqodb.#ctor(System.String,System.Int64,System.Int32)">
            <summary>
            Create a new instance of Siaqodb and open the database with a maximum size defined and provided number of sub-databases
            </summary>
            <param name="path">Physical folder name where objects are stored</param>
            <param name="maxDatabaseSize">max database size in bytes (default 50 MB )</param>
            <param name="maxSubDatabases">max number of subdatabases(default 50); two subdatabases are created per Type; every index will use a separate subdatabase</param>
        </member>
        <member name="M:Sqo.Siaqodb.Open(System.String)">
            <summary>
            Open database 
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Sqo.Siaqodb.Open(System.String,System.Int64,System.Int32)">
            <summary>
            Open database 
            </summary>
            <param name="path">database folder</param>
            <param name="maxDatabaseSize">max database size in bytes (default 50 MB )</param>
            <param name="maxSubDatabases">max number of subdatabases(default 50); two subdatabases are created per Type; every index will use a separate subdatabase</param>
        </member>
        <member name="M:Sqo.Siaqodb.StoreObject(System.Object)">
            <summary>
            Insert or update object; if object is loaded from database and this method is called then update will occur, if object is new created then insert will occur
            </summary>
            <param name="obj">Object to be stored</param>
        </member>
        <member name="M:Sqo.Siaqodb.StoreObjectPartially(System.Object,System.String[])">
            <summary>
             Insert or update object partially, only provided properties are saved
            </summary>
            <param name="obj">object of which properties will be stored</param>
            <param name="properties">properties to be stored</param>
        </member>
        <member name="M:Sqo.Siaqodb.StoreObjectPartially(System.Object,Sqo.Transactions.ITransaction,System.String[])">
            <summary>
            Insert or update object partially by a Transaction, only provided properties are saved 
            </summary>
            <param name="obj">object of which properties will be stored</param>
            <param name="transaction">Transaction object</param>
            <param name="properties">properties to be stored</param>
        </member>
        <member name="M:Sqo.Siaqodb.StoreObjectPartially(System.Object,System.Boolean,System.String[])">
             <summary>
              Insert or update object partially, only provided properties are saved 
             </summary>
             <param name="obj">object of which properties will be stored</param>
             <param name="properties">properties to be stored</param>
            <param name="onlyReferences">if true,it will store only references to complex objects</param>
        </member>
        <member name="M:Sqo.Siaqodb.StoreObjectPartially(System.Object,System.Boolean,Sqo.Transactions.ITransaction,System.String[])">
            <summary>
            Insert or update object partially by a Transaction, only provided properties are saved 
            </summary>
            <param name="obj">object of which properties will be stored</param>
            <param name="onlyReferences">if true,it will store only references to complex objects</param>
            <param name="transaction">Transaction object</param>
            <param name="properties">properties to be stored</param>
        </member>
        <member name="M:Sqo.Siaqodb.StoreObject(System.Object,Sqo.Transactions.ITransaction)">
            <summary>
            Insert or update object by a Transaction; if object is loaded from database and this method is called then update will occur, if object is new created then insert will occur
            </summary>
            <param name="obj">Object to be stored</param>
            <param name="transaction">Transaction object</param>
        </member>
        <member name="M:Sqo.Siaqodb.Load``1(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Sqo.Siaqodb.LoadAll``1">
            <summary>
            Load all objects of Type provided
            </summary>
            <typeparam name="T">Type of objects to be loaded from database</typeparam>
            <returns>List of objects retrieved from database</returns>
        </member>
        <member name="M:Sqo.Siaqodb.LoadObjectByOID``1(System.Int32)">
            <summary>
            Load object from database by OID provided
            </summary>
            <typeparam name="T">The Type of object to be loaded</typeparam>
            <param name="oid">oid of object</param>
            <returns>the object stored in database with oid provided</returns>
        </member>
        <member name="M:Sqo.Siaqodb.Close">
            <summary>
            Close database
            </summary>
        </member>
        <member name="M:Sqo.Siaqodb.Flush">
            <summary>
            Flush buffered data to database
            </summary>
        </member>
        <member name="M:Sqo.Siaqodb.Cast``1">
            <summary>
            Cast method to be used in LINQ queries
            </summary>
            <typeparam name="T">Type over which LINQ will take action</typeparam>
            <returns></returns>
        </member>
        <member name="M:Sqo.Siaqodb.Query``1">
            <summary>
            Query method to be used in LINQ queries
            </summary>
            <typeparam name="T">Type over which LINQ will take action</typeparam>
            <returns></returns>
        </member>
        <member name="M:Sqo.Siaqodb.LoadOids``1(System.Linq.Expressions.Expression)">
            <summary>
            Load OIDs by expression
            </summary>
            <typeparam name="T">Type for which OIDs will be loaded</typeparam>
            <param name="expression">filter expression</param>
            <returns>List of OIDs</returns>
        </member>
        <member name="M:Sqo.Siaqodb.LoadAllOIDs(Sqo.MetaType)">
            <summary>
            Load all object OIDs of MetaType provided
            </summary>
            <param name="type">meta type Load by method GetAllTypes()</param>
            <returns></returns>
        </member>
        <member name="M:Sqo.Siaqodb.LoadValue(System.Int32,System.String,Sqo.MetaType)">
            <summary>
            Load value of a field of an object identified by OID provided
            </summary>
            <param name="oid">OID of object</param>
            <param name="fieldName">fieldName</param>
            <param name="mt">MetaType</param>
            <returns></returns>
        </member>
        <member name="M:Sqo.Siaqodb.Delete(System.Object)">
            <summary>
            Delete an object from database
            </summary>
            <param name="obj">Object to be deleted</param>
        </member>
        <member name="M:Sqo.Siaqodb.Delete(System.Object,Sqo.Transactions.ITransaction)">
            <summary>
            Delete an object from database using a Transaction
            </summary>
            <param name="obj">Object to be deleted</param>
            <param name="transaction">Transaction</param>
        </member>
        <member name="M:Sqo.Siaqodb.DeleteObjectBy(System.String,System.Object)">
            <summary>
            Delete an object from database by a certain field(ex:ID that come from server)
            </summary>
            <param name="obj">Object to be deleted</param>
            <param name="fieldName">Names of field that this method will lookup for object to delete it</param>
        </member>
        <member name="M:Sqo.Siaqodb.DeleteObjectBy(System.Object,System.String[])">
            <summary>
            Delete an object from database by a certain field(ex:ID that come from server)
            </summary>
            <param name="obj">Object to be deleted</param>
            <param name="fieldNames">Names of fields that this method will lookup for object to delete it</param>
        </member>
        <member name="M:Sqo.Siaqodb.DeleteObjectBy(System.Object,Sqo.Transactions.ITransaction,System.String[])">
            <summary>
            Delete an object from database by a certain field(ex:ID that come from server)
            </summary>
            <param name="obj">Object to be deleted</param>
            <param name="fieldNames">Names of fields that this method will lookup for object to delete it</param>
            <param name="transaction">Transaction object</param>
        </member>
        <member name="M:Sqo.Siaqodb.DeleteObjectBy(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Delete an object from database by a criteria
            </summary>
            <param name="criteria">Pairs of fields-values to lookup for object to delete it</param>
            <returns>Number of objects deleted</returns>
        </member>
        <member name="M:Sqo.Siaqodb.DeleteObjectBy``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Delete an object from database by a criteria
            </summary>
            <param name="criteria">Pairs of fields-values to lookup for object to delete it</param>
            <returns>Number of objects deleted</returns>
        </member>
        <member name="M:Sqo.Siaqodb.DropType``1">
            <summary>
            Delete all objects of Type provided
            </summary>
            <typeparam name="T">Type of objects to be deleted</typeparam>
        </member>
        <member name="M:Sqo.Siaqodb.DropType(System.Type)">
            <summary>
            Delete all objects of Type provided
            </summary>
            <param name="type">Type of objects to be deleted</param>>
        </member>
        <member name="M:Sqo.Siaqodb.DropType(System.Type,Sqo.Transactions.ITransaction)">
            <summary>
            Delete all objects of Type provided
            </summary>
            <param name="type">Type of objects to be deleted</param>>
        </member>
        <member name="M:Sqo.Siaqodb.GetAllTypes">
            <summary>
            Return all Types from database folder
            </summary>
            <returns>List of MetaType objects</returns>
        </member>
        <member name="M:Sqo.Siaqodb.Count``1">
            <summary>
            Return number of objects of Type provided
            </summary>
            <typeparam name="T">Type of objects</typeparam>
            <returns></returns>
        </member>
        <member name="M:Sqo.Siaqodb.UpdateObjectBy(System.String,System.Object)">
            <summary>
            Update an object in database by a certain Field(eq: ID that come from a server)
            </summary>
            <param name="fieldName">FieldName by which update is made(eq an ID)</param>
            <param name="obj">object that has all values but not OID to update it in database</param>
            <returns>true if object was updated and false if object was not found in database</returns>
        </member>
        <member name="M:Sqo.Siaqodb.UpdateObjectBy(System.Object,System.String[])">
            <summary>
            Update an object in database by certain Fields(eq: ID that come from a server)
            </summary>
            <param name="fieldNames">name of fields by which update is made(eq an ID)</param>
            <param name="obj">object that has all values but not OID to update it in database</param>
            <returns>true if object was updated and false if object was not found in database</returns>
        </member>
        <member name="M:Sqo.Siaqodb.UpdateObjectBy(System.Object,Sqo.Transactions.ITransaction,System.String[])">
            <summary>
            Update an object in database by certain Fields(eq: ID that come from a server)
            </summary>
            <param name="fieldNames">name of fields by which update is made(eq an ID)</param>
            <param name="obj">object that has all values but not OID to update it in database</param>
            <param name="transaction">Transaction object</param>
            <returns>true if object was updated and false if object was not found in database</returns>
        </member>
        <member name="M:Sqo.Siaqodb.GetDBPath">
            <summary>
            return current database path
            </summary>
            <returns>The database folder path</returns>
        </member>
        <member name="M:Sqo.Siaqodb.BeginTransaction">
            <summary>
            Start a database Transaction to be used on insert/update/delete objects
            </summary>
            <returns> Transaction object</returns>
        </member>
        <member name="M:Sqo.Siaqodb.LoadAllLazy``1">
            <summary>
            Load all objects in Lazy mode, objects are activated/read from db when it is accessed
            by index or by enumerator
            </summary>
            <typeparam name="T">Type of objects to be loaded from database</typeparam>
            <returns>LazyObjectList of objects</returns>
        </member>
        <member name="M:Sqo.Siaqodb.GetOID(System.Object)">
            <summary>
            Get OID of object, if the Type of object has not defined OID property then object and OID are weak cached during object load from database and this value is returned,
            otherwise it is returned value of the OID property 
            </summary>
            <param name="obj">The object for which OID is returned</param>
            <returns>The OID associated with object that is stored in database</returns>
        </member>
        <member name="M:Sqo.Siaqodb.GetAllValues(Sqo.Meta.SqoTypeInfo,Sqo.Meta.FieldSqoInfo,LightningDB.LightningTransaction)">
            <summary>
            Returns OIDs and values for a field
            </summary>
            <param name="ti"></param>
            <param name="fi"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="P:Sqo.Siaqodb.Stat.UsedSize">
            <summary>
            Database used size (in bytes)
            </summary>
        </member>
        <member name="P:Sqo.Siaqodb.Stat.MaxSize">
            <summary>
            Max database size ( in bytes)
            </summary>
        </member>
        <member name="P:Sqo.Siaqodb.Stat.MaxSubDatabases">
            <summary>
            Max sub databases, Siaqodb use 2 sub-databases per Type and an additional sub-database for each index
            </summary>
        </member>
        <member name="P:Sqo.Siaqodb.Stat.Path">
            <summary>
            Full db folder path
            </summary>
        </member>
        <member name="P:Sqo.Siaqodb.Stat.FreeSpace">
            <summary>
            Free space (in bytes)
            </summary>
        </member>
        <member name="M:Sqo.SqoStringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
             Returns a value indicating whether the specified System.String object occurs
               within this string.A parameter specifies the type of search
                to use for the specified string.
            </summary>
            <param name="stringObj">Input string</param>
            <param name="value">The string to seek.</param>
            <param name="comparisonType"> One of the enumeration values that specifies the rules for the search.</param>
            <returns>true if the value parameter occurs within this string, or if value is the
                empty string (""); otherwise, false.</returns>
        </member>
        <member name="T:Sqo.SiaqodbConfigurator">
            <summary>
            Class responsible for configurations of Siaqodb database engine
            </summary>
        </member>
        <member name="M:Sqo.SiaqodbConfigurator.AddIndex(System.String,System.Type)">
            <summary>
            Add an index for a field or automatic property of a certain Type,an Index can be added also by using Attribute: Sqo.Attributes.Index;
            both ways of adding index are similar
            </summary>
            <param name="field">Field name or automatic property name</param>
            <param name="type">Type that declare the field</param>
        </member>
        <member name="M:Sqo.SiaqodbConfigurator.AddUniqueConstraint(System.String,System.Type)">
            <summary>
            Add an UniqueConstraint for a field of a certain Type,an UniqueConstraint can be added also by using Attribute: Sqo.Attributes.UniqueConstraint;
            both ways of adding UniqueConstraint are similar
            </summary>
            <param name="field">Field name or automatic property name</param>
            <param name="type">Type that declare the field</param>
        </member>
        <member name="M:Sqo.SiaqodbConfigurator.AddLazyLoadField(System.String,System.Type)">
            <summary>
            Mark a field as LazyLoad, LazyLoad field can be marked also by using Attribute: Sqo.Attributes.LazyLoad
            </summary>
            <param name="field">Field name or automatic property name</param>
            <param name="type">Type that declare the field</param>
        </member>
        <member name="M:Sqo.SiaqodbConfigurator.AddMaxLength(System.String,System.Int32,System.Type)">
            <summary>
            Put MaxLength for a string field or automatic property of a Type, MaxLength can be set also by using Attribute: Sqo.Attributes.MaxLength
            </summary>
            <param name="field">Field name or automatic property name</param>
            <param name="maxLength">max length for a string</param>
            <param name="type">Type that declare the field</param>
        </member>
        <member name="M:Sqo.SiaqodbConfigurator.AddIgnore(System.String,System.Type)">
            <summary>
            Ignore a field or automatic property to be stored
            </summary>
            <param name="field">Name of field or automatic property</param>
            <param name="type">Type that declare the field</param>
        </member>
        <member name="M:Sqo.SiaqodbConfigurator.AddText(System.String,System.Type)">
            <summary>
            Mark field to be stored as a string with unlimited length 
            </summary>
            <param name="field">Name of field or automatic property</param>
            <param name="type">Type that declare the field</param>
        </member>
        <member name="M:Sqo.SiaqodbConfigurator.AddDocument(System.String,System.Type)">
            <summary>
            Mark a field or automatic property of a certain Type to be serialized as a Document ,it can be added also by using Attribute: Sqo.Attributes.Document;
            both ways of set as Document are similar
            </summary>
            <param name="field">Field name or automatic property name</param>
            <param name="type">Type that declare the field</param>
        </member>
        <member name="M:Sqo.SiaqodbConfigurator.PropertyUseField(System.String,System.String,System.Type)">
            <summary>
            Set the name of backing field for a property in case engine cannto discover it, this also can be set by attribute: Sqo.Attributes.UseVariable
            </summary>
            <param name="propertyName">Name of property</param>
            <param name="fieldName">Name of backing field of property</param>
            <param name="type"></param>
        </member>
        <member name="P:Sqo.SiaqodbConfigurator.EncryptedDatabase">
            <summary>
            Set if database will be encrypted or not
            </summary>
        </member>
        <member name="M:Sqo.SiaqodbConfigurator.SetEncryptionPassword(System.String)">
            <summary>
            Set the password for encryption algorithm used to encrypt database data
            </summary>
            <param name="pwd">The password</param>
        </member>
        <member name="M:Sqo.SiaqodbConfigurator.SetEncryptor(Sqo.Encryption.IEncryptor)">
            <summary>
            Set your custom encryption algorithm that implemets IEncryptor interface
            </summary>
            <param name="encryptor">The instance of custom encryption algorithm</param>
        </member>
        <member name="M:Sqo.SiaqodbConfigurator.SetEncryptor(Sqo.BuildInAlgorithm)">
            <summary>
            Set build-in encryption algorithm 
            </summary>
            <param name="alg">Encryption algorithm</param>
        </member>
        <member name="M:Sqo.SiaqodbConfigurator.SetDatabaseFileName``1(System.String)">
            <summary>
            Set custom fileName on disk of database file for Type T
            </summary>
            <typeparam name="T">Type of objects</typeparam>
            <param name="fileName">Name of database file on disk</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sqo.SiaqodbConfigurator.SetDatabaseFileName(System.Type,System.String)" -->
        <member name="M:Sqo.SiaqodbConfigurator.LoadRelatedObjects``1(System.Boolean)">
            <summary>
            By default this is true for all types. Set this to false to not load childs entities of objects of Type provided
            </summary>
            <typeparam name="T">Type for objects</typeparam>
            <param name="loadRelatedObjects">true if related object need to be loaded, false if you want to load by Include(...) method</param>
        </member>
        <member name="M:Sqo.SiaqodbConfigurator.LoadRelatedObjects(System.Type,System.Boolean)">
            <summary>
            By default this is true for all types. Set this to false to not load childs entities of objects of Type provided
            </summary>
            <param name="type">Type for objects</param>
            <param name="loadRelatedObjects">true if related object need to be loaded, false if you want to load by Include(...) method</param>
        </member>
        <member name="M:Sqo.SiaqodbConfigurator.SetLicense(System.String)">
            <summary>
            Set the license key
            </summary>
            <param name="licenseKey">License key</param>
        </member>
        <member name="M:Sqo.SiaqodbConfigurator.SetRaiseLoadEvents(System.Boolean)">
            <summary>
            Set true to raise Loading/Loaded events
            </summary>
            <param name="raiseLoadEvents"></param>
        </member>
        <member name="M:Sqo.SiaqodbConfigurator.SetDocumentSerializer(Sqo.IDocumentSerializer)">
            <summary>
            Set your custom document serializer
            </summary>
            <param name="documentSerializer">The instance of custom document serializer</param>
        </member>
        <member name="M:Sqo.SiaqodbConfigurator.ApplyConfigurator(Sqo.Configurator)">
            <summary>
            Apply default configurations
            </summary>
            <param name="config">Configurator instance</param>
        </member>
        <member name="P:Sqo.SiaqodbConfigurator.AutoGrowthThresholdPercent">
            <summary>
            Get or set the Threshold percent when DB automatically increase the size of database when it is opened.
            Database is increased with AutoGrowthSize amount of bytes.
            Default Threshold is 80%
            </summary>
        </member>
        <member name="P:Sqo.SiaqodbConfigurator.AutoGrowthSize">
            <summary>
            Get or set automatic growth size of database(default is 5 MB).
            </summary>
        </member>
        <member name="T:Sqo.SqoDataObject">
            <summary>
            Basic class that any siaqodb storable class may inherits from 
            </summary>
        </member>
        <member name="P:Sqo.SqoDataObject.OID">
            <summary>
            Object Identifier(unique per Type)
            </summary>
        </member>
        <member name="T:System.Reflection.ObfuscateAssemblyAttribute">
            <summary>
            Instructs obfuscation tools to use their standard obfuscation rules for the appropriate assembly type.
            </summary>
        </member>
        <member name="M:System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reflection.ObfuscateAssemblyAttribute"/> class,
            specifying whether the assembly to be obfuscated is public or private.
            </summary>
            <param name="assemblyIsPrivate"><c>true</c> if the assembly is used within the scope of one application; otherwise, <c>false</c>.</param>
        </member>
        <member name="P:System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value indicating whether the assembly was marked private.
            </summary>
            <value>
            <c>true</c> if the assembly was marked private; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value indicating whether the obfuscation tool should remove the attribute after processing.
            </summary>
            <value>
            <c>true</c> if the obfuscation tool should remove the attribute after processing; otherwise, <c>false</c>.
            The default value for this property is <c>true</c>.
            </value>
        </member>
        <member name="T:System.Reflection.ObfuscationAttribute">
            <summary>
            Instructs obfuscation tools to take the specified actions for an assembly, type, or member.
            </summary>
        </member>
        <member name="M:System.Reflection.ObfuscationAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reflection.ObfuscationAttribute"/> class.
            </summary>
        </member>
        <member name="P:System.Reflection.ObfuscationAttribute.ApplyToMembers">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value indicating whether the attribute of a type is to apply to the members of the type.
            </summary>
            <value>
            <c>true</c> if the attribute is to apply to the members of the type; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:System.Reflection.ObfuscationAttribute.Exclude">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value indicating whether the obfuscation tool should exclude the type or member from obfuscation.
            </summary>
            <value>
            <c>true</c> if the type or member to which this attribute is applied should be excluded from obfuscation; otherwise, <c>false</c>.
            The default is <c>true</c>.
            </value>
        </member>
        <member name="P:System.Reflection.ObfuscationAttribute.Feature">
            <summary>
            Gets or sets a string value that is recognized by the obfuscation tool, and which specifies processing options.
            </summary>
            <value>
            A string value that is recognized by the obfuscation tool, and which specifies processing options. The default is "all".
            </value>
        </member>
        <member name="P:System.Reflection.ObfuscationAttribute.StripAfterObfuscation">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value indicating whether the obfuscation tool should remove the attribute after processing.
            </summary>
            <value>
            <c>true</c> if the obfuscation tool should remove the attribute after processing; otherwise, <c>false</c>.
            The default value for this property is <c>true</c>.
            </value>
        </member>
        <member name="T:LightningDB.CursorDeleteOption">
            <summary>
            Cursor delete operation options
            </summary>
        </member>
        <member name="F:LightningDB.CursorDeleteOption.None">
            <summary>
            No special behavior
            </summary>
        </member>
        <member name="F:LightningDB.CursorDeleteOption.NoDuplicateData">
            <summary>
            Only for MDB_DUPSORT
            For put: don't write if the key and data pair already exist.
            For mdb_cursor_del: remove all duplicate data items.
            </summary>
        </member>
        <member name="T:LightningDB.CursorOperation">
            <summary>
            Cursor operation types
            </summary>
        </member>
        <member name="F:LightningDB.CursorOperation.First">
            <summary>
            Position at first key/data item
            </summary>
        </member>
        <member name="F:LightningDB.CursorOperation.FirstDuplicate">
            <summary>
            Position at first data item of current key. Only for MDB_DUPSORT
            </summary>
        </member>
        <member name="F:LightningDB.CursorOperation.GetBoth">
            <summary>
            Position at key/data pair. Only for MDB_DUPSORT
            </summary>
        </member>
        <member name="F:LightningDB.CursorOperation.GetBothRange">
            <summary>
            position at key, nearest data. Only for MDB_DUPSORT
            </summary>
        </member>
        <member name="F:LightningDB.CursorOperation.GetCurrent">
            <summary>
            Return key/data at current cursor position
            </summary>
        </member>
        <member name="F:LightningDB.CursorOperation.GetMultiple">
            <summary>
            Return all the duplicate data items at the current cursor position. Only for MDB_DUPFIXED
            </summary>
        </member>
        <member name="F:LightningDB.CursorOperation.Last">
            <summary>
            Position at last key/data item
            </summary>
        </member>
        <member name="F:LightningDB.CursorOperation.LastDuplicate">
            <summary>
            Position at last data item of current key. Only for MDB_DUPSORT
            </summary>
        </member>
        <member name="F:LightningDB.CursorOperation.Next">
            <summary>
            Position at next data item
            </summary>
        </member>
        <member name="F:LightningDB.CursorOperation.NextDuplicate">
            <summary>
            Position at next data item of current key. Only for MDB_DUPSORT
            </summary>
        </member>
        <member name="F:LightningDB.CursorOperation.NextMultiple">
            <summary>
            Return all duplicate data items at the next cursor position. Only for MDB_DUPFIXED
            </summary>
        </member>
        <member name="F:LightningDB.CursorOperation.NextNoDuplicate">
            <summary>
            Position at first data item of next key. Only for MDB_DUPSORT
            </summary>
        </member>
        <member name="F:LightningDB.CursorOperation.Previous">
            <summary>
            Position at previous data item
            </summary>
        </member>
        <member name="F:LightningDB.CursorOperation.PreviousDuplicate">
            <summary>
            Position at previous data item of current key. Only for MDB_DUPSORT
            </summary>
        </member>
        <member name="F:LightningDB.CursorOperation.PreviousNoDuplicate">
            <summary>
            Position at last data item of previous key. Only for MDB_DUPSORT
            </summary>
        </member>
        <member name="F:LightningDB.CursorOperation.Set">
            <summary>
            Position at specified key
            </summary>
        </member>
        <member name="F:LightningDB.CursorOperation.SetKey">
            <summary>
            Position at specified key, return key + data
            </summary>
        </member>
        <member name="F:LightningDB.CursorOperation.SetRange">
            <summary>
            Position at first key greater than or equal to specified key.
            </summary>
        </member>
        <member name="T:LightningDB.CursorPutOptions">
            <summary>
            Special options for cursor put operation.
            </summary>
        </member>
        <member name="F:LightningDB.CursorPutOptions.None">
            <summary>
            No special behavior.
            </summary>
        </member>
        <member name="F:LightningDB.CursorPutOptions.Current">
            <summary>
            Overwrite the current key/data pair
            </summary>
        </member>
        <member name="F:LightningDB.CursorPutOptions.NoDuplicateData">
            <summary>
            Only for MDB_DUPSORT
            For put: don't write if the key and data pair already exist.
            For mdb_cursor_del: remove all duplicate data items.
            </summary>
        </member>
        <member name="F:LightningDB.CursorPutOptions.DuplicateSort">
            <summary>
            use sorted duplicates
            </summary>
        </member>
        <member name="F:LightningDB.CursorPutOptions.NoOverwrite">
            <summary>
            For put: Don't write if the key already exists.
            </summary>
        </member>
        <member name="F:LightningDB.CursorPutOptions.ReserveSpace">
            <summary>
            For put: Just reserve space for data, don't copy it. Return a pointer to the reserved space.
            </summary>
        </member>
        <member name="F:LightningDB.CursorPutOptions.AppendData">
            <summary>
            Data is being appended, don't split full pages.
            </summary>
        </member>
        <member name="F:LightningDB.CursorPutOptions.AppendDuplicateData">
            <summary>
            Duplicate data is being appended, don't split full pages.
            </summary>
        </member>
        <member name="T:LightningDB.DatabaseOpenFlags">
            <summary>
            Flags to open a database with.
            </summary>
        </member>
        <member name="F:LightningDB.DatabaseOpenFlags.None">
            <summary>
            No special options.
            </summary>
        </member>
        <member name="F:LightningDB.DatabaseOpenFlags.ReverseKey">
            <summary>
            MDB_REVERSEKEY. Keys are strings to be compared in reverse order, from the end of the strings to the beginning. By default, Keys are treated as strings and compared from beginning to end.
            </summary>
        </member>
        <member name="F:LightningDB.DatabaseOpenFlags.DuplicatesSort">
            <summary>
            MDB_DUPSORT. Duplicate keys may be used in the database. (Or, from another perspective, keys may have multiple data items, stored in sorted order.) By default keys must be unique and may have only a single data item.
            </summary>
        </member>
        <member name="F:LightningDB.DatabaseOpenFlags.IntegerKey">
            <summary>
            MDB_INTEGERKEY. Keys are binary integers in native byte order. 
            Setting this option requires all keys to be the same size, typically sizeof(int) or sizeof(size_t).
            </summary>
        </member>
        <member name="F:LightningDB.DatabaseOpenFlags.DuplicatesFixed">
            <summary>
            MDB_DUPFIXED. This flag may only be used in combination with MDB_DUPSORT. This option tells the library that the data items for this database are all the same size, which allows further optimizations in storage and retrieval. When all data items are the same size, the MDB_GET_MULTIPLE and MDB_NEXT_MULTIPLE cursor operations may be used to retrieve multiple items at once.
            </summary>
        </member>
        <member name="F:LightningDB.DatabaseOpenFlags.IntegerDuplicates">
            <summary>
            MDB_INTEGERDUP. This option specifies that duplicate data items are also integers, and should be sorted as such.
            </summary>
        </member>
        <member name="F:LightningDB.DatabaseOpenFlags.ReverseDuplicates">
            <summary>
            MDB_REVERSEDUP. This option specifies that duplicate data items should be compared as strings in reverse order.
            </summary>
        </member>
        <member name="F:LightningDB.DatabaseOpenFlags.Create">
            <summary>
            Create the named database if it doesn't exist. This option is not allowed in a read-only transaction or a read-only environment.
            </summary>
        </member>
        <member name="T:LightningDB.EnvironmentOpenFlags">
            <summary>
            Options to open LMDB environment
            </summary>
        </member>
        <member name="F:LightningDB.EnvironmentOpenFlags.None">
            <summary>
            No special options.
            </summary>
        </member>
        <member name="F:LightningDB.EnvironmentOpenFlags.FixedMap">
            <summary>
            MDB_FIXEDMAP. use a fixed address for the mmap region. 
            This flag must be specified when creating the environment, and is stored persistently in the environment. 
            If successful, the memory map will always reside at the same virtual address and pointers used to reference data items in the database will be constant across multiple invocations. 
            This option may not always work, depending on how the operating system has allocated memory to shared libraries and other uses. 
            The feature is highly experimental.
            </summary>
        </member>
        <member name="F:LightningDB.EnvironmentOpenFlags.NoSubDir">
            <summary>
            MDB_NOSUBDIR. By default, MDB creates its environment in a directory whose pathname is given in path, and creates its data and lock files under that directory. 
            With this option, path is used as-is for the database main data file. 
            The database lock file is the path with "-lock" appended.
            </summary>
        </member>
        <member name="F:LightningDB.EnvironmentOpenFlags.NoSync">
            <summary>
            MDB_NOSYNC. Don't flush system buffers to disk when committing a transaction. 
            This optimization means a system crash can corrupt the database or lose the last transactions if buffers are not yet flushed to disk. 
            The risk is governed by how often the system flushes dirty buffers to disk and how often mdb_env_sync() is called. 
            However, if the filesystem preserves write order and the MDB_WRITEMAP flag is not used, transactions exhibit ACI (atomicity, consistency, isolation) properties and only lose D (durability). 
            I.e. database integrity is maintained, but a system crash may undo the final transactions. 
            Note that (MDB_NOSYNC | MDB_WRITEMAP) leaves the system with no hint for when to write transactions to disk, unless mdb_env_sync() is called. 
            (MDB_MAPASYNC | MDB_WRITEMAP) may be preferable. 
            This flag may be changed at any time using mdb_env_set_flags().
            </summary>
        </member>
        <member name="F:LightningDB.EnvironmentOpenFlags.ReadOnly">
            <summary>
            MDB_RDONLY. Open the environment in read-only mode. 
            No write operations will be allowed. 
            MDB will still modify the lock file - except on read-only filesystems, where MDB does not use locks.
            </summary>
        </member>
        <member name="F:LightningDB.EnvironmentOpenFlags.NoMetaSync">
            <summary>
            MDB_NOMETASYNC. Flush system buffers to disk only once per transaction, omit the metadata flush. 
            Defer that until the system flushes files to disk, or next non-MDB_RDONLY commit or mdb_env_sync(). 
            This optimization maintains database integrity, but a system crash may undo the last committed transaction. 
            I.e. it preserves the ACI (atomicity, consistency, isolation) but not D (durability) database property. 
            This flag may be changed at any time using mdb_env_set_flags().
            </summary>
        </member>
        <member name="F:LightningDB.EnvironmentOpenFlags.WriteMap">
            <summary>
            MDB_WRITEMAP Use a writeable memory map unless MDB_RDONLY is set. 
            This is faster and uses fewer mallocs, but loses protection from application bugs like wild pointer writes and other bad updates into the database. 
            Incompatible with nested transactions.
            </summary>
        </member>
        <member name="F:LightningDB.EnvironmentOpenFlags.MapAsync">
            <summary>
            MDB_MAPASYNC. When using MDB_WRITEMAP, use asynchronous flushes to disk. 
            As with MDB_NOSYNC, a system crash can then corrupt the database or lose the last transactions. 
            Calling mdb_env_sync() ensures on-disk database integrity until next commit. 
            This flag may be changed at any time using mdb_env_set_flags().
            </summary>
        </member>
        <member name="F:LightningDB.EnvironmentOpenFlags.NoThreadLocalStorage">
            <summary>
            MDB_NOTLS. tie reader locktable slots to MDB_txn objects instead of to threads
            </summary>
        </member>
        <member name="F:LightningDB.EnvironmentOpenFlags.NoLock">
            <summary>
            MDB_NOLOCK. don't do any locking, caller must manage their own locks
            </summary>
        </member>
        <member name="F:LightningDB.EnvironmentOpenFlags.NoReadAhead">
            <summary>
            MDB_NORDAHEAD. don't do readahead (no effect on Windows)
            </summary>
        </member>
        <member name="F:LightningDB.EnvironmentOpenFlags.NoMemoryInitialization">
            <summary>
            MDB_NOMEMINIT. don't initialize malloc'd memory before writing to datafile
            </summary>
        </member>
        <member name="T:LightningDB.IClosingEventSource">
            <summary>
            Contains Closing event.
            </summary>
        </member>
        <member name="E:LightningDB.IClosingEventSource.Closing">
            <summary>
            Triggers when hen closable object is closing.
            </summary>
        </member>
        <member name="T:LightningDB.LightningClosingEventArgs">
            <summary>
            Event arguments for environment's closing events
            </summary>
        </member>
        <member name="P:LightningDB.LightningClosingEventArgs.EnvironmentClosing">
            <summary>
            True if closing is triggered by LightningEnvironment.Close.
            </summary>
        </member>
        <member name="M:LightningDB.LightningClosingEventArgs.#ctor(System.Boolean)">
            <summary>
            Creates new LightningClosingEventArgs instance.
            </summary>
            <param name="environmentClosing">True if closing is triggered by LightningEnvironment.Close</param>
        </member>
        <member name="T:LightningDB.LightningConfig">
            <summary>
            Basic setup for the library.
            </summary>
        </member>
        <member name="T:LightningDB.LightningConfig.Environment">
            <summary>
            Basic environment configuration
            </summary>
        </member>
        <member name="F:LightningDB.LightningConfig.Environment.LibDefaultMapSize">
            <summary>
            Default MapSize for new environments
            </summary>
        </member>
        <member name="F:LightningDB.LightningConfig.Environment.LibDefaultMaxReaders">
            <summary>
            Default MaxReaders for new environments
            </summary>
        </member>
        <member name="F:LightningDB.LightningConfig.Environment.LibDefaultMaxDatabases">
            <summary>
            Default MaxDatabases for new envitonments
            </summary>
        </member>
        <member name="P:LightningDB.LightningConfig.Environment.DefaultMapSize">
            <summary>
            Default map size for new environments
            </summary>
        </member>
        <member name="P:LightningDB.LightningConfig.Environment.DefaultMaxReaders">
            <summary>
            Default MaxReaders for new environments
            </summary>
        </member>
        <member name="P:LightningDB.LightningConfig.Environment.DefaultMaxDatabases">
            <summary>
            Default MaxDatabases for new environments
            </summary>
        </member>
        <member name="P:LightningDB.LightningConfig.Environment.AutoReduceMapSizeIn32BitProcess">
            <summary>
            Automatically reduce MapSize to a value allowed by running process's bitness. Default false.
            </summary>
        </member>
        <member name="T:LightningDB.LightningConfig.Database">
            <summary>
            Basic environment conviguration
            </summary>
        </member>
        <member name="P:LightningDB.LightningConfig.Database.DefaultOpenFlags">
            <summary>
            Default database open flags
            </summary>
        </member>
        <member name="P:LightningDB.LightningConfig.Database.DefaultEncoding">
            <summary>
            Default database encoding
            </summary>
        </member>
        <member name="T:LightningDB.LightningCursor">
            <summary>
            Cursor to iterate over a database
            </summary>
        </member>
        <member name="M:LightningDB.LightningCursor.#ctor(LightningDB.LightningDatabase,LightningDB.LightningTransaction)">
            <summary>
            Creates new instance of LightningCursor
            </summary>
            <param name="db">Database</param>
            <param name="txn">Transaction</param>
        </member>
        <member name="P:LightningDB.LightningCursor.Environment">
            <summary>
            Cursor's environment.
            </summary>
        </member>
        <member name="P:LightningDB.LightningCursor.Database">
            <summary>
            Cursor's database.
            </summary>
        </member>
        <member name="P:LightningDB.LightningCursor.Transaction">
            <summary>
            Cursor's transaction.
            </summary>
        </member>
        <member name="M:LightningDB.LightningCursor.MoveTo(System.Byte[])">
            <summary>
            Position at specified key
            </summary>
            <param name="key">Key</param>
            <returns>Key-value pair for the specified key</returns>
        </member>
        <member name="M:LightningDB.LightningCursor.MoveTo(System.Byte[],System.Byte[])">
            <summary>
            Position at key/data pair. Only for MDB_DUPSORT
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value</param>
            <returns>Current key/data pair.</returns>
        </member>
        <member name="M:LightningDB.LightningCursor.MoveToFirstValueAfter(System.Byte[],System.Byte[])">
            <summary>
            position at key, nearest data. Only for MDB_DUPSORT
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <returns>Nearest value and corresponding key</returns>
        </member>
        <member name="M:LightningDB.LightningCursor.MoveToFirstAfter(System.Byte[])">
            <summary>
            Position at first key greater than or equal to specified key.
            </summary>
            <param name="key">Key</param>
            <returns>First key-value pair with a key greater than or equal to specified key.</returns>
        </member>
        <member name="M:LightningDB.LightningCursor.MoveToFirst">
            <summary>
            Position at first key/data item
            </summary>
            <returns>First key/data item</returns>
        </member>
        <member name="M:LightningDB.LightningCursor.MoveToFirstDuplicate">
            <summary>
            Position at first data item of current key. Only for MDB_DUPSORT
            </summary>
            <returns>First data item of current key. Only for MDB_DUPSORT</returns>
        </member>
        <member name="M:LightningDB.LightningCursor.MoveToLast">
            <summary>
            Position at last key/data item
            </summary>
            <returns>Last key/data item</returns>
        </member>
        <member name="M:LightningDB.LightningCursor.MoveToLastDuplicate">
            <summary>
            Position at last data item of current key. Only for MDB_DUPSORT
            </summary>
            <returns>Last data item of current key</returns>
        </member>
        <member name="M:LightningDB.LightningCursor.GetCurrent">
            <summary>
            Return key/data at current cursor position
            </summary>
            <returns>Key/data at current cursor position</returns>
        </member>
        <member name="M:LightningDB.LightningCursor.GetMultiple">
            <summary>
            Return all the duplicate data items at the current cursor position. Only for MDB_DUPFIXED
            </summary>
            <remarks>Not sure what it should do and if the wrapper is correct</remarks>
            <returns>All the duplicate data items at the current cursor position.</returns>
        </member>
        <member name="M:LightningDB.LightningCursor.MoveNext">
            <summary>
            Position at next data item
            </summary>
            <returns>Next data item</returns>
        </member>
        <member name="M:LightningDB.LightningCursor.MoveNextDuplicate">
            <summary>
            Position at next data item of current key. Only for MDB_DUPSORT
            </summary>
            <returns>Next data item of current key</returns>
        </member>
        <member name="M:LightningDB.LightningCursor.MoveNextNoDuplicate">
            <summary>
            Position at first data item of next key. Only for MDB_DUPSORT.
            </summary>
            <returns>
            First data item of next key.
            </returns>
        </member>
        <member name="M:LightningDB.LightningCursor.MoveNextMultiple">
            <summary>
            Return all duplicate data items at the next cursor position. Only for MDB_DUPFIXED
            </summary>
            <remarks>Not sure what it should do and if the wrapper is correct</remarks>
            <returns>All duplicate data items at the next cursor position</returns>
        </member>
        <member name="M:LightningDB.LightningCursor.MovePrev">
            <summary>
            Position at previous data item.
            </summary>
            <returns>Previous data item.</returns>
        </member>
        <member name="M:LightningDB.LightningCursor.MovePrevDuplicate">
            <summary>
            Position at previous data item of current key. Only for MDB_DUPSORT.
            </summary>
            <returns>Previous data item of current key.</returns>
        </member>
        <member name="M:LightningDB.LightningCursor.MovePrevNoDuplicate">
            <summary>
            Position at last data item of previous key. Only for MDB_DUPSORT.
            </summary>
            <returns>Previous data item of current key.</returns>
        </member>
        <member name="M:LightningDB.LightningCursor.Put(System.Byte[],System.Byte[],LightningDB.CursorPutOptions)">
            <summary>
            Store by cursor.
            This function stores key/data pairs into the database. 
            If the function fails for any reason, the state of the cursor will be unchanged. 
            If the function succeeds and an item is inserted into the database, the cursor is always positioned to refer to the newly inserted item.
            </summary>
            <param name="key">The key operated on.</param>
            <param name="value">The data operated on.</param>
            <param name="options">
            Options for this operation. This parameter must be set to 0 or one of the values described here.
                CursorPutOptions.Current - overwrite the data of the key/data pair to which the cursor refers with the specified data item. The key parameter is ignored.
                CursorPutOptions.NoDuplicateData - enter the new key/data pair only if it does not already appear in the database. This flag may only be specified if the database was opened with MDB_DUPSORT. The function will return MDB_KEYEXIST if the key/data pair already appears in the database.
                CursorPutOptions.NoOverwrite - enter the new key/data pair only if the key does not already appear in the database. The function will return MDB_KEYEXIST if the key already appears in the database, even if the database supports duplicates (MDB_DUPSORT).
                CursorPutOptions.ReserveSpace - reserve space for data of the given size, but don't copy the given data. Instead, return a pointer to the reserved space, which the caller can fill in later. This saves an extra memcpy if the data is being generated later.
                CursorPutOptions.AppendData - append the given key/data pair to the end of the database. No key comparisons are performed. This option allows fast bulk loading when keys are already known to be in the correct order. Loading unsorted keys with this flag will cause data corruption.
                CursorPutOptions.AppendDuplicateData - as above, but for sorted dup data.
            </param>
        </member>
        <member name="M:LightningDB.LightningCursor.Delete(LightningDB.CursorDeleteOption)">
            <summary>
            Delete current key/data pair.
            This function deletes the key/data pair to which the cursor refers.
            </summary>
            <param name="option">Options for this operation. This parameter must be set to 0 or one of the values described here.
                MDB_NODUPDATA - delete all of the data items for the current key. This flag may only be specified if the database was opened with MDB_DUPSORT.</param>
        </member>
        <member name="M:LightningDB.LightningCursor.Renew">
            <summary>
            Renew a cursor handle.
            Cursors are associated with a specific transaction and database and may not span threads. 
            Cursors that are only used in read-only transactions may be re-used, to avoid unnecessary malloc/free overhead. 
            The cursor may be associated with a new read-only transaction, and referencing the same database handle as it was created with.
            </summary>
        </member>
        <member name="M:LightningDB.LightningCursor.Renew(LightningDB.LightningTransaction)">
            <summary>
            Renew a cursor handle.
            Cursors are associated with a specific transaction and database and may not span threads. 
            Cursors that are only used in read-only transactions may be re-used, to avoid unnecessary malloc/free overhead. 
            The cursor may be associated with a new read-only transaction, and referencing the same database handle as it was created with.
            </summary>
            <param name="txn">Transaction to renew in.</param>
        </member>
        <member name="M:LightningDB.LightningCursor.Close">
            <summary>
            Close a cursor handle.
            The cursor handle will be freed and must not be used again after this call.
            </summary>
        </member>
        <member name="M:LightningDB.LightningCursor.Dispose(System.Boolean)">
            <summary>
            Closes the cursor and deallocates all resources associated with it.
            </summary>
            <param name="shouldDispose">True if not disposed yet.</param>
        </member>
        <member name="M:LightningDB.LightningCursor.Dispose">
            <summary>
            Closes the cursor and deallocates all resources associated with it.
            </summary>
        </member>
        <member name="T:LightningDB.LightningDatabase">
            <summary>
            Lightning database.
            </summary>
        </member>
        <member name="F:LightningDB.LightningDatabase.DefaultDatabaseName">
            <summary>
            Database name by default.
            </summary>
        </member>
        <member name="M:LightningDB.LightningDatabase.#ctor(System.String,LightningDB.LightningTransaction,System.Nullable{LightningDB.DatabaseOpenFlags},System.Text.Encoding)">
            <summary>
            Creates a LightningDatabase instance.
            </summary>
            <param name="name">Database name.</param>
            <param name="flags">Database open flags/</param>
            <param name="tran">Active transaction.</param>
            <param name="encoding">Default strings encoding.</param>
        </member>
        <member name="P:LightningDB.LightningDatabase.IsOpened">
            <summary>
            Is database opened.
            </summary>
        </member>
        <member name="P:LightningDB.LightningDatabase.Name">
            <summary>
            Database name.
            </summary>
        </member>
        <member name="P:LightningDB.LightningDatabase.Encoding">
            <summary>
            Default strings encoding.
            </summary>
        </member>
        <member name="P:LightningDB.LightningDatabase.Environment">
            <summary>
            Environment in which the database was opened.
            </summary>
        </member>
        <member name="P:LightningDB.LightningDatabase.OpenFlags">
            <summary>
            Flags with which the database was opened.
            </summary>
        </member>
        <member name="M:LightningDB.LightningDatabase.Close">
            <summary>
            Clode the database.
            </summary>
        </member>
        <member name="M:LightningDB.LightningDatabase.Dispose(System.Boolean)">
            <summary>
            Deallocates resources opeened by the database.
            </summary>
            <param name="shouldDispose">true if not disposed yet.</param>
        </member>
        <member name="M:LightningDB.LightningDatabase.Dispose">
            <summary>
            Deallocates resources opeened by the database.
            </summary>
        </member>
        <member name="T:LightningDB.LightningEnvironment">
            <summary>
            LMDB Environment.
            </summary>
        </member>
        <member name="M:LightningDB.LightningEnvironment.#ctor(System.String,LightningDB.EnvironmentOpenFlags,LightningDB.UnixAccessMode)">
            <summary>
            Creates a new instance of LightningEnvironment.
            </summary>
            <param name="directory">Directory for storing database files.</param>
            <param name="openFlags">Database open options.</param>
            <param name="accessMode">Unix file access privelegies (optional). Only makes sense on unix operationg systems.</param>
        </member>
        <member name="F:LightningDB.LightningEnvironment._syncRoot">
            <summary>
            Triggered when the environment is going to close.
            </summary>
        </member>
        <member name="P:LightningDB.LightningEnvironment.IsOpened">
            <summary>
            Whether the environment is opened.
            </summary>
        </member>
        <member name="P:LightningDB.LightningEnvironment.Version">
            <summary>
            Current lmdb version.
            </summary>
        </member>
        <member name="P:LightningDB.LightningEnvironment.MapSize">
            Set the size of the memory map to use for this environment.
            The size should be a multiple of the OS page size. 
            The default is 10485760 bytes. 
            The size of the memory map is also the maximum size of the database. 
            The value should be chosen as large as possible, to accommodate future growth of the database. 
            This function may only be called before the environment is opened. 
            The size may be changed by closing and reopening the environment. 
            Any attempt to set a size smaller than the space already consumed by the environment will be silently changed to the current size of the used space.
        </member>
        <member name="P:LightningDB.LightningEnvironment.MaxReaders">
            <summary>
            Get the maximum number of threads for the environment.
            </summary>
        </member>
        <member name="P:LightningDB.LightningEnvironment.MaxDatabases">
            <summary>
            Set the maximum number of named databases for the environment.
            This function is only needed if multiple databases will be used in the environment. 
            Simpler applications that use the environment as a single unnamed database can ignore this option. 
            This function may only be called before the environment is opened.
            </summary>
        </member>
        <member name="P:LightningDB.LightningEnvironment.Directory">
            <summary>
            Directory path to store database files.
            </summary>
        </member>
        <member name="M:LightningDB.LightningEnvironment.Open">
            <summary>
            Open the environment.
            </summary>
        </member>
        <member name="M:LightningDB.LightningEnvironment.Close">
            <summary>
            Close the environment and release the memory map.
            Only a single thread may call this function. All transactions, databases, and cursors must already be closed before calling this function. 
            Attempts to use any such handles after calling this function will cause a SIGSEGV. 
            The environment handle will be freed and must not be used again after this call.
            </summary>
        </member>
        <member name="M:LightningDB.LightningEnvironment.OnClosing">
            <summary>
            Called when the environment is going to close.
            </summary>
        </member>
        <member name="M:LightningDB.LightningEnvironment.BeginTransaction(LightningDB.LightningTransaction,LightningDB.TransactionBeginFlags)">
            <summary>
            Create a transaction for use with the environment.
            The transaction handle may be discarded using Abort() or Commit().
            Note:
            Transactions may not span threads; a transaction must only be used by a single thread. Also, a thread may only have a single transaction.
            Cursors may not span transactions; each cursor must be opened and closed within a single transaction.
            </summary>
            <param name="parent">
            If this parameter is non-NULL, the new transaction will be a nested transaction, with the transaction indicated by parent as its parent. 
            Transactions may be nested to any level. 
            A parent transaction may not issue any other operations besides BeginTransaction, Abort, or Commit while it has active child transactions.
            </param>
            <param name="beginFlags">
            Special options for this transaction. 
            </param>
            <returns>
            New LightningTransaction
            </returns>
        </member>
        <member name="M:LightningDB.LightningEnvironment.BeginTransaction(LightningDB.TransactionBeginFlags)">
            <summary>
            Create a transaction for use with the environment.
            The transaction handle may be discarded usingAbort() or Commit().
            Note:
            Transactions may not span threads; a transaction must only be used by a single thread. Also, a thread may only have a single transaction.
            Cursors may not span transactions; each cursor must be opened and closed within a single transaction.
            </summary>
            <param name="beginFlags">
            Special options for this transaction. 
            </param>
            <returns>
            New LightningTransaction
            </returns>
        </member>
        <member name="M:LightningDB.LightningEnvironment.BeginTransaction">
            <summary>
            Create a transaction for use with the environment.
            The transaction handle may be discarded using Abort() or Commit().
            Note:
            Transactions may not span threads; a transaction must only be used by a single thread. Also, a thread may only have a single transaction.
            Cursors may not span transactions; each cursor must be opened and closed within a single transaction.
            </summary>        
            <returns>
            New LightningTransaction
            </returns>
        </member>
        <member name="M:LightningDB.LightningEnvironment.CopyTo(System.String)">
            <summary>
            Copy an MDB environment to the specified path.
            This function may be used to make a backup of an existing environment.
            </summary>
            <param name="path">The directory in which the copy will reside. This directory must already exist and be writable but must otherwise be empty.</param>
        </member>
        <member name="M:LightningDB.LightningEnvironment.Flush(System.Boolean)">
            <summary>
            Flush the data buffers to disk. 
            Data is always written to disk when LightningTransaction.Commit is called, but the operating system may keep it buffered. 
            MDB always flushes the OS buffers upon commit as well, unless the environment was opened with EnvironmentOpenFlags.NoSync or in part EnvironmentOpenFlags.NoMetaSync.
            </summary>
            <param name="force">If true, force a synchronous flush. Otherwise if the environment has the EnvironmentOpenFlags.NoSync flag set the flushes will be omitted, and with MDB_MAPASYNC they will be asynchronous.</param>
        </member>
        <member name="M:LightningDB.LightningEnvironment.Dispose(System.Boolean)">
            <summary>
            Closes the environment and deallocates all resources associated with it.
            </summary>
            <param name="shouldDispose">True if not disposed yet.</param>
        </member>
        <member name="M:LightningDB.LightningEnvironment.Dispose">
            <summary>
            Closes the environment and deallocates all resources associated with it.
            </summary>
        </member>
        <member name="T:LightningDB.LightningException">
            <summary>
            An exception caused by lmdb operations.
            </summary>
        </member>
        <member name="T:LightningDB.LightningTransaction">
            <summary>
            Represents a transaction.
            </summary>
        </member>
        <member name="F:LightningDB.LightningTransaction.DefaultTransactionBeginFlags">
            <summary>
            Default options used to begin new transactions.
            </summary>
        </member>
        <member name="M:LightningDB.LightningTransaction.#ctor(LightningDB.LightningEnvironment,LightningDB.LightningTransaction,LightningDB.TransactionBeginFlags)">
            <summary>
            Created new instance of LightningTransaction
            </summary>
            <param name="environment">Environment.</param>
            <param name="parent">Parent transaction or null.</param>
            <param name="flags">Transaction open options.</param>
        </member>
        <member name="F:LightningDB.LightningTransaction._syncRoot">
            <summary>
            Triggered when the transaction is going to be deallocated.
            </summary>
        </member>
        <member name="M:LightningDB.LightningTransaction.OnClosing(System.Boolean)">
            <summary>
            Called when the transaction is going to be deallocated.
            </summary>
            <param name="environmentClosing">Is this deallocation caused by closing corresponding environment.</param>
        </member>
        <member name="P:LightningDB.LightningTransaction.State">
            <summary>
            Current transaction state.
            </summary>
        </member>
        <member name="M:LightningDB.LightningTransaction.BeginTransaction(LightningDB.TransactionBeginFlags)">
            <summary>
            Begin a child transaction.
            </summary>
            <param name="beginFlags">Options for a new transaction.</param>
            <returns>New child transaction.</returns>
        </member>
        <member name="M:LightningDB.LightningTransaction.BeginTransaction">
            <summary>
            Begins a child transaction.
            </summary>
            <returns>New child transaction with default options.</returns>
        </member>
        <member name="M:LightningDB.LightningTransaction.OpenDatabase(System.String,System.Nullable{LightningDB.DatabaseOpenFlags},System.Text.Encoding)">
            <summary>
            Opens a database in context of this transaction.
            </summary>
            <param name="name">Database name (optional). If null then the default name is used.</param>
            <param name="flags">Database open options (optionsl).</param>
            <param name="encoding">Database keys encoding.</param>
            <returns>Created database wrapper.</returns>
        </member>
        <member name="M:LightningDB.LightningTransaction.DropDatabase(LightningDB.LightningDatabase,System.Boolean)">
            <summary>
            Deletes or closes a database.
            </summary>
            <param name="db">Database</param>
            <param name="delete">Database is deleted permanently if true, or just closed if false.</param>
        </member>
        <member name="M:LightningDB.LightningTransaction.CreateCursor(LightningDB.LightningDatabase)">
            <summary>
            Create a cursor.
            Cursors are associated with a specific transaction and database and may not span threads.
            </summary>
            <param name="db">A database.</param>
        </member>
        <member name="M:LightningDB.LightningTransaction.Get(LightningDB.LightningDatabase,System.Byte[])">
            <summary>
            Get value from a database.
            </summary>
            <param name="db">Database </param>
            <param name="key">Key byte array.</param>
            <returns>Requested value's byte array if exists, or null if not.</returns>
        </member>
        <member name="M:LightningDB.LightningTransaction.TryGet(LightningDB.LightningDatabase,System.Byte[],System.Byte[]@)">
            <summary>
            Tries to get a value by its key.
            </summary>
            <param name="db">Database.</param>
            <param name="key">Key byte array.</param>
            <param name="value">Value byte array if exists.</param>
            <returns>True if key exists, false if not.</returns>
        </member>
        <member name="M:LightningDB.LightningTransaction.ContainsKey(LightningDB.LightningDatabase,System.Byte[])">
            <summary>
            Check whether data exists in database.
            </summary>
            <param name="db">Database.</param>
            <param name="key">Key.</param>
            <returns>True if key exists, false if not.</returns>
        </member>
        <member name="M:LightningDB.LightningTransaction.Put(LightningDB.LightningDatabase,System.Byte[],System.Byte[],LightningDB.PutOptions)">
            <summary>
            Put data into a database.
            </summary>
            <param name="db">Database.</param>
            <param name="key">Key byte array.</param>
            <param name="value">Value byte array.</param>
            <param name="options">Operation options (optional).</param>
        </member>
        <member name="M:LightningDB.LightningTransaction.Delete(LightningDB.LightningDatabase,System.Byte[],System.Byte[])">
            <summary>
            Delete items from a database.
            This function removes key/data pairs from the database. 
            If the database does not support sorted duplicate data items (MDB_DUPSORT) the data parameter is ignored. 
            If the database supports sorted duplicates and the data parameter is NULL, all of the duplicate data items for the key will be deleted. 
            Otherwise, if the data parameter is non-NULL only the matching data item will be deleted. 
            This function will return MDB_NOTFOUND if the specified key/data pair is not in the database.
            </summary>
            <param name="db">A database handle returned by mdb_dbi_open()</param>
            <param name="key">The key to delete from the database</param>
            <param name="value">The data to delete (optional)</param>
        </member>
        <member name="M:LightningDB.LightningTransaction.Reset">
            <summary>
            Reset current transaction.
            </summary>
        </member>
        <member name="M:LightningDB.LightningTransaction.Renew">
            <summary>
            Renew current transaction.
            </summary>
        </member>
        <member name="M:LightningDB.LightningTransaction.Commit">
            <summary>
            Commit all the operations of a transaction into the database.
            All cursors opened within the transaction will be closed by this call. 
            The cursors and transaction handle will be freed and must not be used again after this call.
            </summary>
        </member>
        <member name="M:LightningDB.LightningTransaction.Abort">
            <summary>
            Abandon all the operations of the transaction instead of saving them.
            All cursors opened within the transaction will be closed by this call.
            The cursors and transaction handle will be freed and must not be used again after this call.
            </summary>
        </member>
        <member name="P:LightningDB.LightningTransaction.Environment">
            <summary>
            Environment in which the transaction was opened.
            </summary>
        </member>
        <member name="P:LightningDB.LightningTransaction.ParentTransaction">
            <summary>
            Parent transaction of this transaction.
            </summary>
        </member>
        <member name="P:LightningDB.LightningTransaction.IsReadOnly">
            <summary>
            Whether this transaction is read-only.
            </summary>
        </member>
        <member name="M:LightningDB.LightningTransaction.Dispose(System.Boolean)">
            <summary>
            Abort this transaction and deallocate all resources associated with it (including databases).
            </summary>
            <param name="shouldDispose">True if not disposed yet.</param>
        </member>
        <member name="M:LightningDB.LightningTransaction.Dispose">
            <summary>
            Abort this transaction and deallocate all resources associated with it (including databases).
            </summary>
        </member>
        <member name="T:LightningDB.LightningTransactionState">
            <summary>
            Transaction state.
            </summary>
        </member>
        <member name="F:LightningDB.LightningTransactionState.Active">
            <summary>
            Transaction is currently active.
            </summary>
        </member>
        <member name="F:LightningDB.LightningTransactionState.Reseted">
            <summary>
            Transaction is currently reseted.
            </summary>
        </member>
        <member name="F:LightningDB.LightningTransactionState.Aborted">
            <summary>
            Transaction is aborted.
            </summary>
        </member>
        <member name="F:LightningDB.LightningTransactionState.Commited">
            <summary>
            Transaction is commited.
            </summary>
        </member>
        <member name="T:LightningDB.LightningVersionInfo">
            <summary>
            Represents lmdb version information.
            </summary>
        </member>
        <member name="P:LightningDB.LightningVersionInfo.Major">
            <summary>
            Major version number.
            </summary>
        </member>
        <member name="P:LightningDB.LightningVersionInfo.Minor">
            <summary>
            Minor version number.
            </summary>
        </member>
        <member name="P:LightningDB.LightningVersionInfo.Patch">
            <summary>
            Patch version number.
            </summary>
        </member>
        <member name="P:LightningDB.LightningVersionInfo.Version">
            <summary>
            Version string.
            </summary>
        </member>
        <member name="T:LightningDB.PutOptions">
            <summary>
            Special options for put operation.
            </summary>
        </member>
        <member name="F:LightningDB.PutOptions.None">
            <summary>
            No special behavior.
            </summary>
        </member>
        <member name="F:LightningDB.PutOptions.NoDuplicateData">
            <summary>
            Only for MDB_DUPSORT
            For put: don't write if the key and data pair already exist.
            For mdb_cursor_del: remove all duplicate data items.
            </summary>
        </member>
        <member name="F:LightningDB.PutOptions.DuplicateSort">
            <summary>
            use sorted duplicates
            </summary>
        </member>
        <member name="F:LightningDB.PutOptions.NoOverwrite">
            <summary>
            For put: Don't write if the key already exists.
            </summary>
        </member>
        <member name="F:LightningDB.PutOptions.ReserveSpace">
            <summary>
            For put: Just reserve space for data, don't copy it. Return a pointer to the reserved space.
            </summary>
        </member>
        <member name="F:LightningDB.PutOptions.AppendData">
            <summary>
            Data is being appended, don't split full pages.
            </summary>
        </member>
        <member name="F:LightningDB.PutOptions.AppendDuplicateData">
            <summary>
            Duplicate data is being appended, don't split full pages.
            </summary>
        </member>
        <member name="T:LightningDB.TransactionBeginFlags">
            <summary>
            Transaction open mode
            </summary>
        </member>
        <member name="F:LightningDB.TransactionBeginFlags.None">
            <summary>
            Normal mode
            </summary>
        </member>
        <member name="F:LightningDB.TransactionBeginFlags.ReadOnly">
            <summary>
            MDB_RDONLY. Open the environment in read-only mode. 
            No write operations will be allowed. 
            MDB will still modify the lock file - except on read-only filesystems, where MDB does not use locks.
            </summary>
        </member>
        <member name="T:LightningDB.UnixAccessMode">
            <summary>
            Unix file access privilegies
            </summary>
        </member>
        <member name="F:LightningDB.UnixAccessMode.OwnerRead">
            <summary>
            S_IRUSR
            </summary>
        </member>
        <member name="F:LightningDB.UnixAccessMode.OwnerWrite">
            <summary>
            S_IWUSR
            </summary>
        </member>
        <member name="F:LightningDB.UnixAccessMode.OwnerExec">
            <summary>
            S_IXUSR
            </summary>
        </member>
        <member name="F:LightningDB.UnixAccessMode.GroupRead">
            <summary>
            S_IRGRP
            </summary>
        </member>
        <member name="F:LightningDB.UnixAccessMode.GroupWrite">
            <summary>
            S_IWGRP
            </summary>
        </member>
        <member name="F:LightningDB.UnixAccessMode.GroupExec">
            <summary>
            S_IXGRP
            </summary>
        </member>
        <member name="F:LightningDB.UnixAccessMode.OtherRead">
            <summary>
            S_IROTH
            </summary>
        </member>
        <member name="F:LightningDB.UnixAccessMode.OtherWrite">
            <summary>
            S_IWOTH
            </summary>
        </member>
        <member name="F:LightningDB.UnixAccessMode.OtherExec">
            <summary>
            S_IXOTH
            </summary>
        </member>
        <member name="F:LightningDB.UnixAccessMode.Default">
            <summary>
            Owner, Group, Other Read/Write
            </summary>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_env_create(System.IntPtr@)">
            <summary>
            Create an MDB environment handle.
            This function allocates memory for a MDB_env structure. 
            To release the allocated memory and discard the handle, call mdb_env_close(). 
            Before the handle may be used, it must be opened using mdb_env_open(). 
            Various other options may also need to be set before opening the handle, e.g. mdb_env_set_mapsize(), mdb_env_set_maxreaders(), mdb_env_set_maxdbs(), depending on usage requirements.
            </summary>
            <param name="env">The address where the new handle will be stored</param>
            <returns>A non-zero error value on failure and 0 on success.</returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_env_close(System.IntPtr)">
            <summary>
            Close the environment and release the memory map.
            Only a single thread may call this function. All transactions, databases, and cursors must already be closed before calling this function. 
            Attempts to use any such handles after calling this function will cause a SIGSEGV. 
            The environment handle will be freed and must not be used again after this call.
            </summary>
            <param name="env">An environment handle returned by mdb_env_create()</param>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_env_open(System.IntPtr,System.String,LightningDB.EnvironmentOpenFlags,LightningDB.UnixAccessMode)">
            <summary>
            Open an environment handle.
            If this function fails, mdb_env_close() must be called to discard the MDB_env handle.
            </summary>
            <param name="env">An environment handle returned by mdb_env_create()</param>
            <param name="path">The directory in which the database files reside. This directory must already exist and be writable.</param>
            <param name="flags">
            Special options for this environment. This parameter must be set to 0 or by bitwise OR'ing together one or more of the values described here. Flags set by mdb_env_set_flags() are also used.
                MDB_FIXEDMAP use a fixed address for the mmap region. This flag must be specified when creating the environment, and is stored persistently in the environment. If successful, the memory map will always reside at the same virtual address and pointers used to reference data items in the database will be constant across multiple invocations. This option may not always work, depending on how the operating system has allocated memory to shared libraries and other uses. The feature is highly experimental.
                MDB_NOSUBDIR By default, MDB creates its environment in a directory whose pathname is given in path, and creates its data and lock files under that directory. With this option, path is used as-is for the database main data file. The database lock file is the path with "-lock" appended.
                MDB_RDONLY Open the environment in read-only mode. No write operations will be allowed. MDB will still modify the lock file - except on read-only filesystems, where MDB does not use locks.
                MDB_WRITEMAP Use a writeable memory map unless MDB_RDONLY is set. This is faster and uses fewer mallocs, but loses protection from application bugs like wild pointer writes and other bad updates into the database. Incompatible with nested transactions.
                MDB_NOMETASYNC Flush system buffers to disk only once per transaction, omit the metadata flush. Defer that until the system flushes files to disk, or next non-MDB_RDONLY commit or mdb_env_sync(). This optimization maintains database integrity, but a system crash may undo the last committed transaction. I.e. it preserves the ACI (atomicity, consistency, isolation) but not D (durability) database property. This flag may be changed at any time using mdb_env_set_flags().
                MDB_NOSYNC Don't flush system buffers to disk when committing a transaction. This optimization means a system crash can corrupt the database or lose the last transactions if buffers are not yet flushed to disk. The risk is governed by how often the system flushes dirty buffers to disk and how often mdb_env_sync() is called. However, if the filesystem preserves write order and the MDB_WRITEMAP flag is not used, transactions exhibit ACI (atomicity, consistency, isolation) properties and only lose D (durability). I.e. database integrity is maintained, but a system crash may undo the final transactions. Note that (MDB_NOSYNC | MDB_WRITEMAP) leaves the system with no hint for when to write transactions to disk, unless mdb_env_sync() is called. (MDB_MAPASYNC | MDB_WRITEMAP) may be preferable. This flag may be changed at any time using mdb_env_set_flags().
                MDB_MAPASYNC When using MDB_WRITEMAP, use asynchronous flushes to disk. As with MDB_NOSYNC, a system crash can then corrupt the database or lose the last transactions. Calling mdb_env_sync() ensures on-disk database integrity until next commit. This flag may be changed at any time using mdb_env_set_flags().
            </param>
            <param name="mode">The UNIX permissions to set on created files. This parameter is ignored on Windows.</param>
            <returns>
            A non-zero error value on failure and 0 on success. Some possible errors are:
                MDB_VERSION_MISMATCH - the version of the MDB library doesn't match the version that created the database environment.
                MDB_INVALID - the environment file headers are corrupted.
                ENOENT - the directory specified by the path parameter doesn't exist.
                EACCES - the user didn't have permission to access the environment files.
                EAGAIN - the environment was locked by another process.
            </returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_env_open(System.IntPtr,System.String,LightningDB.EnvironmentOpenFlags,System.Int32)">
            <summary>
            Open an environment handle.
            If this function fails, mdb_env_close() must be called to discard the MDB_env handle.
            </summary>
            <param name="env">An environment handle returned by mdb_env_create()</param>
            <param name="path">The directory in which the database files reside. This directory must already exist and be writable.</param>
            <param name="flags">
            Special options for this environment. This parameter must be set to 0 or by bitwise OR'ing together one or more of the values described here. Flags set by mdb_env_set_flags() are also used.
                MDB_FIXEDMAP use a fixed address for the mmap region. This flag must be specified when creating the environment, and is stored persistently in the environment. If successful, the memory map will always reside at the same virtual address and pointers used to reference data items in the database will be constant across multiple invocations. This option may not always work, depending on how the operating system has allocated memory to shared libraries and other uses. The feature is highly experimental.
                MDB_NOSUBDIR By default, MDB creates its environment in a directory whose pathname is given in path, and creates its data and lock files under that directory. With this option, path is used as-is for the database main data file. The database lock file is the path with "-lock" appended.
                MDB_RDONLY Open the environment in read-only mode. No write operations will be allowed. MDB will still modify the lock file - except on read-only filesystems, where MDB does not use locks.
                MDB_WRITEMAP Use a writeable memory map unless MDB_RDONLY is set. This is faster and uses fewer mallocs, but loses protection from application bugs like wild pointer writes and other bad updates into the database. Incompatible with nested transactions.
                MDB_NOMETASYNC Flush system buffers to disk only once per transaction, omit the metadata flush. Defer that until the system flushes files to disk, or next non-MDB_RDONLY commit or mdb_env_sync(). This optimization maintains database integrity, but a system crash may undo the last committed transaction. I.e. it preserves the ACI (atomicity, consistency, isolation) but not D (durability) database property. This flag may be changed at any time using mdb_env_set_flags().
                MDB_NOSYNC Don't flush system buffers to disk when committing a transaction. This optimization means a system crash can corrupt the database or lose the last transactions if buffers are not yet flushed to disk. The risk is governed by how often the system flushes dirty buffers to disk and how often mdb_env_sync() is called. However, if the filesystem preserves write order and the MDB_WRITEMAP flag is not used, transactions exhibit ACI (atomicity, consistency, isolation) properties and only lose D (durability). I.e. database integrity is maintained, but a system crash may undo the final transactions. Note that (MDB_NOSYNC | MDB_WRITEMAP) leaves the system with no hint for when to write transactions to disk, unless mdb_env_sync() is called. (MDB_MAPASYNC | MDB_WRITEMAP) may be preferable. This flag may be changed at any time using mdb_env_set_flags().
                MDB_MAPASYNC When using MDB_WRITEMAP, use asynchronous flushes to disk. As with MDB_NOSYNC, a system crash can then corrupt the database or lose the last transactions. Calling mdb_env_sync() ensures on-disk database integrity until next commit. This flag may be changed at any time using mdb_env_set_flags().
            </param>
            <param name="mode">The UNIX permissions to set on created files. This parameter is ignored on Windows.</param>
            <returns>
            A non-zero error value on failure and 0 on success. Some possible errors are:
                MDB_VERSION_MISMATCH - the version of the MDB library doesn't match the version that created the database environment.
                MDB_INVALID - the environment file headers are corrupted.
                ENOENT - the directory specified by the path parameter doesn't exist.
                EACCES - the user didn't have permission to access the environment files.
                EAGAIN - the environment was locked by another process.
            </returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_env_set_mapsize(System.IntPtr,System.Int64)">
            <summary>
            Set the size of the memory map to use for this environment.
            The size should be a multiple of the OS page size. 
            The default is 10485760 bytes. 
            The size of the memory map is also the maximum size of the database. 
            The value should be chosen as large as possible, to accommodate future growth of the database. 
            This function may only be called after mdb_env_create() and before mdb_env_open(). 
            The size may be changed by closing and reopening the environment. 
            Any attempt to set a size smaller than the space already consumed by the environment will be silently changed to the current size of the used space.
            </summary>
            <param name="env">An environment handle returned by mdb_env_create()</param>
            <param name="size">The size in bytes</param>
            <returns>
            A non-zero error value on failure and 0 on success. Some possible errors are:
                EINVAL - an invalid parameter was specified, or the environment is already open.
            </returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_env_get_maxreaders(System.IntPtr,System.UInt32@)">
            <summary>
            Get the maximum number of threads for the environment.
            </summary>
            <param name="env">An environment handle returned by mdb_env_create()</param>
            <param name="readers">Address of an integer to store the number of readers</param>
            <returns>
            A non-zero error value on failure and 0 on success. Some possible errors are:
                EINVAL - an invalid parameter was specified.
            </returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_env_set_maxreaders(System.IntPtr,System.UInt32)">
            <summary>
            Set the maximum number of threads for the environment.
            This defines the number of slots in the lock table that is used to track readers in the the environment. 
            The default is 126. 
            This function may only be called after mdb_env_create() and before mdb_env_open().
            </summary>
            <param name="env">An environment handle returned by mdb_env_create()</param>
            <param name="readers">The maximum number of threads</param>
            <returns>
            A non-zero error value on failure and 0 on success. Some possible errors are:
                EINVAL - an invalid parameter was specified, or the environment is already open.
            </returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_env_set_maxdbs(System.IntPtr,System.UInt32)">
            <summary>
            Set the maximum number of named databases for the environment.
            This function is only needed if multiple databases will be used in the environment. 
            Simpler applications that use the environment as a single unnamed database can ignore this option. 
            This function may only be called after mdb_env_create() and before mdb_env_open().
            </summary>
            <param name="env">An environment handle returned by mdb_env_create()</param>
            <param name="dbs">The maximum number of databases</param>
            <returns>
            A non-zero error value on failure and 0 on success. Some possible errors are:
                EINVAL - an invalid parameter was specified, or the environment is already open.
            </returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_dbi_open(System.IntPtr,System.String,LightningDB.DatabaseOpenFlags,System.UInt32@)">
            <summary>
            Open a database in the environment.
            The database handle may be discarded by calling mdb_dbi_close(). 
            It denotes the name and parameters of a database, independently of whether such a database exists. 
            It will not exist if the transaction which created it aborted, nor if another process deleted it. 
            The database handle resides in the shared environment, it is not owned by the given transaction. 
            Only one thread should call this function; it is not mutex-protected in a read-only transaction. 
            Preexisting transactions, other than the current transaction and any parents, must not use the new handle. 
            Nor must their children. To use named databases (with name != NULL), mdb_env_set_maxdbs() must be called before opening the environment.
            </summary>
            <param name="txn">A transaction handle returned by mdb_txn_begin()</param>
            <param name="name">The name of the database to open. If only a single database is needed in the environment, this value may be NULL.</param>
            <param name="flags">
            Special options for this database. This parameter must be set to 0 or by bitwise OR'ing together one or more of the values described here.
                MDB_REVERSEKEY Keys are strings to be compared in reverse order, from the end of the strings to the beginning. By default, Keys are treated as strings and compared from beginning to end.
                MDB_DUPSORT Duplicate keys may be used in the database. (Or, from another perspective, keys may have multiple data items, stored in sorted order.) By default keys must be unique and may have only a single data item.
                MDB_INTEGERKEY Keys are binary integers in native byte order. Setting this option requires all keys to be the same size, typically sizeof(int) or sizeof(size_t).
                MDB_DUPFIXED This flag may only be used in combination with MDB_DUPSORT. This option tells the library that the data items for this database are all the same size, which allows further optimizations in storage and retrieval. When all data items are the same size, the MDB_GET_MULTIPLE and MDB_NEXT_MULTIPLE cursor operations may be used to retrieve multiple items at once.
                MDB_INTEGERDUP This option specifies that duplicate data items are also integers, and should be sorted as such.
                MDB_REVERSEDUP This option specifies that duplicate data items should be compared as strings in reverse order.
                MDB_CREATE Create the named database if it doesn't exist. This option is not allowed in a read-only transaction or a read-only environment.
            </param>
            <param name="db">Address where the new MDB_dbi handle will be stored</param>
            <returns>
            A non-zero error value on failure and 0 on success. Some possible errors are:
            MDB_NOTFOUND (-30798) - the specified database doesn't exist in the environment and MDB_CREATE was not specified.
            MDB_DBS_FULL (-30791) - too many databases have been opened. See mdb_env_set_maxdbs().
            </returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_dbi_close(System.IntPtr,System.UInt32)">
            <summary>
            Close a database handle.
            This call is not mutex protected. 
            Handles should only be closed by a single thread, and only if no other threads are going to reference the database handle or one of its cursors any further. 
            Do not close a handle if an existing transaction has modified its database.
            </summary>
            <param name="env">An environment handle returned by mdb_env_create()</param>
            <param name="dbi">A database handle returned by mdb_dbi_open()</param>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_drop(System.IntPtr,System.UInt32,System.Boolean)">
            <summary>
            Delete a database and/or free all its pages.
            If the del parameter is 1, the DB handle will be closed and the DB will be deleted.
            </summary>
            <param name="txn">A transaction handle returned by mdb_txn_begin()</param>
            <param name="dbi">A database handle returned by mdb_dbi_open()</param>
            <param name="del">1 to delete the DB from the environment, 0 to just free its pages.</param>
            <returns>A non-zero error value on failure and 0 on success.</returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_txn_begin(System.IntPtr,System.IntPtr,LightningDB.TransactionBeginFlags,System.IntPtr@)">
            <summary>
            Create a transaction for use with the environment.
            The transaction handle may be discarded using mdb_txn_abort() or mdb_txn_commit().
            Note:
            Transactions may not span threads; a transaction must only be used by a single thread. Also, a thread may only have a single transaction.
            Cursors may not span transactions; each cursor must be opened and closed within a single transaction.
            </summary>
            <param name="env">An environment handle returned by mdb_env_create()</param>
            <param name="parent">
            If this parameter is non-NULL, the new transaction will be a nested transaction, with the transaction indicated by parent as its parent. 
            Transactions may be nested to any level. 
            A parent transaction may not issue any other operations besides mdb_txn_begin, mdb_txn_abort, or mdb_txn_commit while it has active child transactions.
            </param>
            <param name="flags">
            Special options for this transaction. 
            This parameter must be set to 0 or by bitwise OR'ing together one or more of the values described here.
                MDB_RDONLY This transaction will not perform any write operations.
            </param>
            <param name="txn">Address where the new MDB_txn handle will be stored</param>
            <returns>
            A non-zero error value on failure and 0 on success. Some possible errors are:
                MDB_PANIC (-30795) - a fatal error occurred earlier and the environment
                    * must be shut down.
                MDB_MAP_RESIZED (-30785) - another process wrote data beyond this MDB_env's mapsize and the environment must be shut down.
                MDB_READERS_FULL (-30790) - a read-only transaction was requested and the reader lock table is full. See mdb_env_set_maxreaders().
                ENOMEM - out of memory.
            </returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_txn_commit(System.IntPtr)">
            <summary>
            Commit all the operations of a transaction into the database.
            All cursors opened within the transaction will be closed by this call. 
            The cursors and transaction handle will be freed and must not be used again after this call.
            </summary>
            <param name="txn">A transaction handle returned by mdb_txn_begin()</param>
            <returns>
            A non-zero error value on failure and 0 on success. Some possible errors are:
                EINVAL - an invalid parameter was specified.
                ENOSPC - no more disk space.
                EIO - a low-level I/O error occurred while writing.
                ENOMEM - out of memory.
            </returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_txn_abort(System.IntPtr)">
            <summary>
            Abandon all the operations of the transaction instead of saving them.
            All cursors opened within the transaction will be closed by this call.
            The cursors and transaction handle will be freed and must not be used again after this call.
            </summary>
            <param name="txn">A transaction handle returned by mdb_txn_begin()</param>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_txn_reset(System.IntPtr)">
            <summary>
            Reset a read-only transaction.
            This releases the current reader lock but doesn't free the transaction handle, allowing it to be used again later by mdb_txn_renew(). 
            It otherwise has the same effect as mdb_txn_abort() but saves some memory allocation/deallocation overhead if a thread is going to start a new read-only transaction again soon. 
            All cursors opened within the transaction must be closed before the transaction is reset. 
            Reader locks generally don't interfere with writers, but they keep old versions of database pages allocated. 
            Thus they prevent the old pages from being reused when writers commit new data, and so under heavy load the database size may grow much more rapidly than otherwise.
            </summary>
            <param name="txn">A transaction handle returned by mdb_txn_begin()</param>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_txn_renew(System.IntPtr)">
            <summary>
            Renew a read-only transaction.
            This acquires a new reader lock for a transaction handle that had been released by mdb_txn_reset(). 
            It must be called before a reset transaction may be used again.
            </summary>
            <param name="txn">A transaction handle returned by mdb_txn_begin()</param>
            <returns>
            A non-zero error value on failure and 0 on success. Some possible errors are:
                MDB_PANIC - a fatal error occurred earlier and the environment must be shut down.
                EINVAL - an invalid parameter was specified.
            </returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_version(System.IntPtr@,System.IntPtr@,System.IntPtr@)">
            <summary>
            Return the mdb library version information.
            </summary>
            <param name="major">if non-NULL, the library major version number is copied here</param>
            <param name="minor">if non-NULL, the library minor version number is copied here</param>
            <param name="patch">if non-NULL, the library patch version number is copied here</param>
            <returns>The library version as a string</returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_strerror(System.Int32)">
            <summary>
            Return a string describing a given error code.
            This function is a superset of the ANSI C X3.159-1989 (ANSI C) strerror(3) function. 
            If the error code is greater than or equal to 0, then the string returned by the system function strerror(3) is returned. 
            If the error code is less than 0, an error string corresponding to the MDB library error is returned. 
            See Return Codes for a list of MDB-specific error codes.
            </summary>
            <param name="err">The error code</param>
            <returns>The description of the error</returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_env_copy(System.IntPtr,System.String)">
            <summary>
            Copy an MDB environment to the specified path.
            This function may be used to make a backup of an existing environment.
            </summary>
            <param name="env">An environment handle returned by mdb_env_create(). It must have already been opened successfully.</param>
            <param name="path">The directory in which the copy will reside. This directory must already exist and be writable but must otherwise be empty.</param>
            <returns>A non-zero error value on failure and 0 on success.</returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_env_sync(System.IntPtr,System.Boolean)">
            <summary>
            Flush the data buffers to disk. 
            Data is always written to disk when mdb_txn_commit() is called, but the operating system may keep it buffered. 
            MDB always flushes the OS buffers upon commit as well, unless the environment was opened with MDB_NOSYNC or in part MDB_NOMETASYNC.
            </summary>
            <param name="env">An environment handle returned by mdb_env_create()</param>
            <param name="force">If non-zero, force a synchronous flush. Otherwise if the environment has the MDB_NOSYNC flag set the flushes will be omitted, and with MDB_MAPASYNC they will be asynchronous.</param>
            <returns>
            A non-zero error value on failure and 0 on success. Some possible errors are:
                EINVAL - an invalid parameter was specified.
                EIO - an error occurred during synchronization.
            </returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_get(System.IntPtr,System.UInt32,LightningDB.Native.ValueStructure@,LightningDB.Native.ValueStructure@)">
            <summary>
            Use with native library built for 32-bit systems.
            Get items from a database.
            This function retrieves key/data pairs from the database. 
            The address and length of the data associated with the specified key are returned in the structure to which data refers. 
            If the database supports duplicate keys (MDB_DUPSORT) then the first data item for the key will be returned. 
            Retrieval of other items requires the use of mdb_cursor_get().
            Note:
                The memory pointed to by the returned values is owned by the database. 
                The caller need not dispose of the memory, and may not modify it in any way. 
                For values returned in a read-only transaction any modification attempts will cause a SIGSEGV.
            </summary>
            <param name="txn">A transaction handle returned by mdb_txn_begin()</param>
            <param name="dbi">A database handle returned by mdb_dbi_open()</param>
            <param name="key">The key to search for in the database</param>
            <param name="data">The data corresponding to the key</param>
            <returns>
            A non-zero error value on failure and 0 on success. Some possible errors are:
                MDB_NOTFOUND - the key was not in the database.
                EINVAL - an invalid parameter was specified.
            </returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_put(System.IntPtr,System.UInt32,LightningDB.Native.ValueStructure@,LightningDB.Native.ValueStructure@,LightningDB.PutOptions)">
            <summary>
            Use with native library built for 32-bit systems.
            Store items into a database.
            This function stores key/data pairs in the database. 
            The default behavior is to enter the new key/data pair, replacing any previously existing key if duplicates are disallowed, or adding a duplicate data item if duplicates are allowed (MDB_DUPSORT).
            </summary>
            <param name="txn">A transaction handle returned by mdb_txn_begin()</param>
            <param name="dbi">A database handle returned by mdb_dbi_open()</param>
            <param name="key">The key to store in the database</param>
            <param name="data">The data to store</param>
            <param name="flags">
            Special options for this operation. 
            This parameter must be set to 0 or by bitwise OR'ing together one or more of the values described here.
                MDB_NODUPDATA - enter the new key/data pair only if it does not already appear in the database. This flag may only be specified if the database was opened with MDB_DUPSORT. The function will return MDB_KEYEXIST if the key/data pair already appears in the database.
                MDB_NOOVERWRITE - enter the new key/data pair only if the key does not already appear in the database. The function will return MDB_KEYEXIST if the key already appears in the database, even if the database supports duplicates (MDB_DUPSORT). The data parameter will be set to point to the existing item.
                MDB_RESERVE - reserve space for data of the given size, but don't copy the given data. Instead, return a pointer to the reserved space, which the caller can fill in later. This saves an extra memcpy if the data is being generated later.
                MDB_APPEND - append the given key/data pair to the end of the database. No key comparisons are performed. This option allows fast bulk loading when keys are already known to be in the correct order. Loading unsorted keys with this flag will cause data corruption.
                MDB_APPENDDUP - as above, but for sorted dup data.
            </param>
            <returns>
            A non-zero error value on failure and 0 on success. Some possible errors are:
                MDB_MAP_FULL - the database is full, see mdb_env_set_mapsize().
                MDB_TXN_FULL - the transaction has too many dirty pages.
                EACCES - an attempt was made to write in a read-only transaction.
                EINVAL - an invalid parameter was specified.
            </returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_del(System.IntPtr,System.UInt32,LightningDB.Native.ValueStructure@,LightningDB.Native.ValueStructure@)">
            <summary>
            Delete items from a database.
            This function removes key/data pairs from the database. 
            If the database does not support sorted duplicate data items (MDB_DUPSORT) the data parameter is ignored. 
            If the database supports sorted duplicates and the data parameter is NULL, all of the duplicate data items for the key will be deleted. 
            Otherwise, if the data parameter is non-NULL only the matching data item will be deleted. 
            This function will return MDB_NOTFOUND if the specified key/data pair is not in the database.
            </summary>
            <param name="txn">A transaction handle returned by mdb_txn_begin()</param>
            <param name="dbi">A database handle returned by mdb_dbi_open()</param>
            <param name="key">The key to delete from the database</param>
            <param name="data">The data to delete</param>
            <returns>
            A non-zero error value on failure and 0 on success. Some possible errors are:
                EACCES - an attempt was made to write in a read-only transaction.
                EINVAL - an invalid parameter was specified.
            </returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_del(System.IntPtr,System.UInt32,LightningDB.Native.ValueStructure@,System.IntPtr)">
            <summary>
            Use with native library built for 32-bit systems.
            Delete items from a database.
            This function removes key/data pairs from the database. 
            If the database does not support sorted duplicate data items (MDB_DUPSORT) the data parameter is ignored. 
            If the database supports sorted duplicates and the data parameter is NULL, all of the duplicate data items for the key will be deleted. 
            Otherwise, if the data parameter is non-NULL only the matching data item will be deleted. 
            This function will return MDB_NOTFOUND if the specified key/data pair is not in the database.
            </summary>
            <param name="txn">A transaction handle returned by mdb_txn_begin()</param>
            <param name="dbi">A database handle returned by mdb_dbi_open()</param>
            <param name="key">The key to delete from the database</param>
            <param name="data">The data to delete</param>
            <returns>
            A non-zero error value on failure and 0 on success. Some possible errors are:
                EACCES - an attempt was made to write in a read-only transaction.
                EINVAL - an invalid parameter was specified.
            </returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_cursor_open(System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            Create a cursor handle.
            Cursors are associated with a specific transaction and database and may not span threads.
            </summary>
            <param name="txn">A transaction handle returned by mdb_txn_begin()</param>
            <param name="dbi">A database handle returned by mdb_dbi_open()</param>
            <param name="cursor">Address where the new MDB_cursor handle will be stored</param>
            <returns>
            A non-zero error value on failure and 0 on success. Some possible errors are:
                EINVAL - an invalid parameter was specified.
            </returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_cursor_close(System.IntPtr)">
            <summary>
            Close a cursor handle.
            The cursor handle will be freed and must not be used again after this call.
            </summary>
            <param name="cursor">A cursor handle returned by mdb_cursor_open()</param>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_cursor_renew(System.IntPtr,System.IntPtr)">
            <summary>
            Renew a cursor handle.
            Cursors are associated with a specific transaction and database and may not span threads. 
            Cursors that are only used in read-only transactions may be re-used, to avoid unnecessary malloc/free overhead. 
            The cursor may be associated with a new read-only transaction, and referencing the same database handle as it was created with.
            </summary>
            <param name="txn">A transaction handle returned by mdb_txn_begin()</param>
            <param name="cursor">A cursor handle returned by mdb_cursor_open()</param>
            <returns>
            A non-zero error value on failure and 0 on success. Some possible errors are:
                EINVAL - an invalid parameter was specified.
            </returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_cursor_get(System.IntPtr,LightningDB.Native.ValueStructure@,LightningDB.Native.ValueStructure@,LightningDB.CursorOperation)">
            <summary>
            Use with native library built for 32-bit systems.
            Retrieve by cursor.
            This function retrieves key/data pairs from the database. 
            The address and length of the key are returned in the object to which key refers (except for the case of the MDB_SET option, in which the key object is unchanged), and the address and length of the data are returned in the object to which data refers.
            </summary>
            <param name="cursor">A cursor handle returned by mdb_cursor_open()</param>
            <param name="key">The key for a retrieved item</param>
            <param name="data">The data of a retrieved item</param>
            <param name="op">A cursor operation MDB_cursor_op</param>
            <returns>
            A non-zero error value on failure and 0 on success. Some possible errors are:
                MDB_NOTFOUND - no matching key found.
                EINVAL - an invalid parameter was specified.
            </returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_cursor_put(System.IntPtr,LightningDB.Native.ValueStructure@,LightningDB.Native.ValueStructure@,LightningDB.CursorPutOptions)">
            <summary>
            Store by cursor.
            This function stores key/data pairs into the database. 
            If the function fails for any reason, the state of the cursor will be unchanged. 
            If the function succeeds and an item is inserted into the database, the cursor is always positioned to refer to the newly inserted item.
            </summary>
            <param name="cursor">A cursor handle returned by mdb_cursor_open()</param>
            <param name="key">The key operated on.</param>
            <param name="data">The data operated on.</param>
            <param name="flags">
            Options for this operation. This parameter must be set to 0 or one of the values described here.
                MDB_CURRENT - overwrite the data of the key/data pair to which the cursor refers with the specified data item. The key parameter is ignored.
                MDB_NODUPDATA - enter the new key/data pair only if it does not already appear in the database. This flag may only be specified if the database was opened with MDB_DUPSORT. The function will return MDB_KEYEXIST if the key/data pair already appears in the database.
                MDB_NOOVERWRITE - enter the new key/data pair only if the key does not already appear in the database. The function will return MDB_KEYEXIST if the key already appears in the database, even if the database supports duplicates (MDB_DUPSORT).
                MDB_RESERVE - reserve space for data of the given size, but don't copy the given data. Instead, return a pointer to the reserved space, which the caller can fill in later. This saves an extra memcpy if the data is being generated later.
                MDB_APPEND - append the given key/data pair to the end of the database. No key comparisons are performed. This option allows fast bulk loading when keys are already known to be in the correct order. Loading unsorted keys with this flag will cause data corruption.
                MDB_APPENDDUP - as above, but for sorted dup data.
            </param>
            <returns>
            A non-zero error value on failure and 0 on success. Some possible errors are:
                MDB_MAP_FULL - the database is full, see mdb_env_set_mapsize().
                MDB_TXN_FULL - the transaction has too many dirty pages.
                EACCES - an attempt was made to modify a read-only database.
                EINVAL - an invalid parameter was specified.
            </returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_cursor_del(System.IntPtr,LightningDB.CursorDeleteOption)">
            <summary>
            Delete current key/data pair.
            This function deletes the key/data pair to which the cursor refers.
            </summary>
            <param name="cursor">A cursor handle returned by mdb_cursor_open()</param>
            <param name="flags">Options for this operation. This parameter must be set to 0 or one of the values described here.
                MDB_NODUPDATA - delete all of the data items for the current key. This flag may only be specified if the database was opened with MDB_DUPSORT.</param>
            <returns>
            A non-zero error value on failure and 0 on success. Some possible errors are:
                EACCES - an attempt was made to modify a read-only database.
                EINVAL - an invalid parameter was specified.
            </returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_env_info(System.IntPtr,LightningDB.Native.MDBEnvInfo@)">
            <summary>
            Return information about the LMDB environment.
            </summary>
            <param name="env">An environment handle returned by mdb_env_create()</param>
            <param name="stat">The address of an MDB_envinfo structure where the information will be copied</param>
            <returns></returns>
        </member>
        <member name="M:LightningDB.Native.INativeLibraryFacade.mdb_env_stat(System.IntPtr,LightningDB.Native.MDBStat@)">
            <summary>
            Return statistics about the LMDB environment.
            </summary>
            <param name="env">An environment handle returned by mdb_env_create()</param>
            <param name="stat">The address of an MDB_stat structure where the statistics will be copied</param>
            <returns></returns>
        </member>
        <member name="F:LightningDB.Native.NativeMethods.MDB_TXN_FULL">
            <summary>
            Txn has too many dirty pages
            </summary>
        </member>
        <member name="F:LightningDB.Native.NativeMethods.MDB_MAP_FULL">
            <summary>
            Environment mapsize reached
            </summary>
        </member>
        <member name="F:LightningDB.Native.NativeMethods.MDB_INVALID">
            <summary>
            File is not a valid MDB file.
            </summary>
        </member>
        <member name="F:LightningDB.Native.NativeMethods.MDB_VERSION_MISMATCH">
            <summary>
            Environment version mismatch.
            </summary>
        </member>
        <member name="F:LightningDB.Native.NativeMethods.MDB_PANIC">
            <summary>
            Update of meta page failed, probably I/O error
            </summary>
        </member>
        <member name="F:LightningDB.Native.NativeMethods.MDB_MAP_RESIZED">
            <summary>
            Database contents grew beyond environment mapsize
            </summary>
        </member>
        <member name="F:LightningDB.Native.NativeMethods.MDB_READERS_FULL">
            <summary>
            Environment maxreaders reached
            </summary>
        </member>
        <member name="F:LightningDB.Native.NativeMethods.MDB_DBS_FULL">
            <summary>
            Environment maxdbs reached
            </summary>
        </member>
        <member name="F:LightningDB.Native.NativeMethods.MDB_NOTFOUND">
            <summary>
            key/data pair not found (EOF)
            </summary>
        </member>
        <member name="F:LightningDB.Native.MDBStat.ms_psize">
            <summary>
            Size of a database page. This is currently the same for all databases.
            </summary>
        </member>
        <member name="F:LightningDB.Native.MDBStat.ms_depth">
            <summary>
            Depth (height) of the B-tree
            </summary>
        </member>
        <member name="F:LightningDB.Native.MDBStat.ms_branch_pages">
            <summary>
            Number of internal (non-leaf) pages
            </summary>
        </member>
        <member name="F:LightningDB.Native.MDBStat.ms_leaf_pages">
            <summary>
            Number of leaf pages
            </summary>
        </member>
        <member name="F:LightningDB.Native.MDBStat.ms_overflow_pages">
            <summary>
            Number of overflow pages
            </summary>
        </member>
        <member name="F:LightningDB.Native.MDBStat.ms_entries">
            <summary>
            Number of data items
            </summary>
        </member>
        <member name="F:LightningDB.Native.MDBEnvInfo.me_mapaddr">
            <summary>
            Address of map, if fixed
            </summary>
        </member>
        <member name="F:LightningDB.Native.MDBEnvInfo.me_mapsize">
            <summary>
            Size of the data memory map
            </summary>
        </member>
        <member name="F:LightningDB.Native.MDBEnvInfo.me_last_pgno">
            <summary>
            ID of the last used page
            </summary>
        </member>
        <member name="F:LightningDB.Native.MDBEnvInfo.me_last_txnid">
            <summary>
            ID of the last committed transaction
            </summary>
        </member>
        <member name="F:LightningDB.Native.MDBEnvInfo.me_maxreaders">
            <summary>
            max reader slots in the environment
            </summary>
        </member>
        <member name="F:LightningDB.Native.MDBEnvInfo.me_numreaders">
            <summary>
            max reader slots used in the environment
            </summary>
        </member>
    </members>
</doc>
